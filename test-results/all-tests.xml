<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="23" failures="58" skipped="0" tests="93" time="5.812" timestamp="2025-07-09T12:01:22.509784+08:00" hostname="James-MacBook-Air.local"><testcase classname="tests.test_api_auth.TestAuthAPI" name="test_register_success" time="0.065"><failure message="assert 422 == 201&#10; +  where 422 = &lt;Response [422 Unprocessable Entity]&gt;.status_code">self = &lt;test_api_auth.TestAuthAPI object at 0x108d47590&gt;
client = &lt;starlette.testclient.TestClient object at 0x1090fa150&gt;
db = &lt;sqlalchemy.orm.session.Session object at 0x1091081d0&gt;

    def test_register_success(self, client: TestClient, db):
        """測試用戶註冊成功"""
        user_data = {
            "username": "newuser",
            "email": "newuser@example.com",
            "password": "password123"
        }
    
        response = client.post("/api/auth/register", json=user_data)
    
&gt;       assert response.status_code == 201
E       assert 422 == 201
E        +  where 422 = &lt;Response [422 Unprocessable Entity]&gt;.status_code

tests/test_api_auth.py:27: AssertionError</failure></testcase><testcase classname="tests.test_api_auth.TestAuthAPI" name="test_register_duplicate_username" time="0.029"><failure message="assert 422 == 400&#10; +  where 422 = &lt;Response [422 Unprocessable Entity]&gt;.status_code">self = &lt;test_api_auth.TestAuthAPI object at 0x107dfcaa0&gt;
client = &lt;starlette.testclient.TestClient object at 0x109108290&gt;
test_user = &lt;User testuser&gt;

    def test_register_duplicate_username(self, client: TestClient, test_user):
        """測試註冊重複用戶名"""
        user_data = {
            "username": test_user.username,
            "email": "different@example.com",
            "password": "password123"
        }
    
        response = client.post("/api/auth/register", json=user_data)
    
&gt;       assert response.status_code == 400
E       assert 422 == 400
E        +  where 422 = &lt;Response [422 Unprocessable Entity]&gt;.status_code

tests/test_api_auth.py:51: AssertionError</failure></testcase><testcase classname="tests.test_api_auth.TestAuthAPI" name="test_register_duplicate_email" time="0.013"><failure message="assert 422 == 400&#10; +  where 422 = &lt;Response [422 Unprocessable Entity]&gt;.status_code">self = &lt;test_api_auth.TestAuthAPI object at 0x1090f8d70&gt;
client = &lt;starlette.testclient.TestClient object at 0x10941b410&gt;
test_user = &lt;User testuser&gt;

    def test_register_duplicate_email(self, client: TestClient, test_user):
        """測試註冊重複郵箱"""
        user_data = {
            "username": "differentuser",
            "email": test_user.email,
            "password": "password123"
        }
    
        response = client.post("/api/auth/register", json=user_data)
    
&gt;       assert response.status_code == 400
E       assert 422 == 400
E        +  where 422 = &lt;Response [422 Unprocessable Entity]&gt;.status_code

tests/test_api_auth.py:65: AssertionError</failure></testcase><testcase classname="tests.test_api_auth.TestAuthAPI" name="test_register_invalid_email" time="0.012"><failure message="AssertionError: assert 'validation error' in 'value is not a valid email address: The email address is not valid. It must have exactly one @-sign.'">self = &lt;test_api_auth.TestAuthAPI object at 0x1090faf90&gt;
client = &lt;starlette.testclient.TestClient object at 0x109419130&gt;

    def test_register_invalid_email(self, client: TestClient):
        """測試註冊無效郵箱"""
        user_data = {
            "username": "testuser",
            "email": "invalid-email",
            "password": "password123"
        }
    
        response = client.post("/api/auth/register", json=user_data)
    
        assert response.status_code == 422
        data = response.json()
&gt;       assert "validation error" in data["detail"][0]["msg"]
E       AssertionError: assert 'validation error' in 'value is not a valid email address: The email address is not valid. It must have exactly one @-sign.'

tests/test_api_auth.py:81: AssertionError</failure></testcase><testcase classname="tests.test_api_auth.TestAuthAPI" name="test_register_weak_password" time="0.012"><failure message="AssertionError: assert '至少' in 'String should have at least 6 characters'">self = &lt;test_api_auth.TestAuthAPI object at 0x1090f8c20&gt;
client = &lt;starlette.testclient.TestClient object at 0x1095dd4c0&gt;

    def test_register_weak_password(self, client: TestClient):
        """測試註冊弱密碼"""
        user_data = {
            "username": "testuser",
            "email": "test@example.com",
            "password": "123"
        }
    
        response = client.post("/api/auth/register", json=user_data)
    
        assert response.status_code == 422
        data = response.json()
&gt;       assert "至少" in data["detail"][0]["msg"]
E       AssertionError: assert '至少' in 'String should have at least 6 characters'

tests/test_api_auth.py:95: AssertionError</failure></testcase><testcase classname="tests.test_api_auth.TestAuthAPI" name="test_login_success" time="0.013"><failure message="assert 422 == 200&#10; +  where 422 = &lt;Response [422 Unprocessable Entity]&gt;.status_code">self = &lt;test_api_auth.TestAuthAPI object at 0x1090f8860&gt;
client = &lt;starlette.testclient.TestClient object at 0x1095c1820&gt;
test_user = &lt;User testuser&gt;

    def test_login_success(self, client: TestClient, test_user):
        """測試用戶登錄成功"""
        login_data = {
            "username": test_user.username,
            "password": "password123"
        }
    
        with patch("app.auth.verify_password", return_value=True):
            response = client.post("/api/auth/login", data=login_data)
    
&gt;       assert response.status_code == 200
E       assert 422 == 200
E        +  where 422 = &lt;Response [422 Unprocessable Entity]&gt;.status_code

tests/test_api_auth.py:107: AssertionError</failure></testcase><testcase classname="tests.test_api_auth.TestAuthAPI" name="test_login_invalid_username" time="0.011"><failure message="assert 422 == 401&#10; +  where 422 = &lt;Response [422 Unprocessable Entity]&gt;.status_code">self = &lt;test_api_auth.TestAuthAPI object at 0x1091c76b0&gt;
client = &lt;starlette.testclient.TestClient object at 0x10959c710&gt;

    def test_login_invalid_username(self, client: TestClient):
        """測試用戶登錄無效用戶名"""
        login_data = {
            "username": "nonexistent",
            "password": "password123"
        }
    
        response = client.post("/api/auth/login", data=login_data)
    
&gt;       assert response.status_code == 401
E       assert 422 == 401
E        +  where 422 = &lt;Response [422 Unprocessable Entity]&gt;.status_code

tests/test_api_auth.py:125: AssertionError</failure></testcase><testcase classname="tests.test_api_auth.TestAuthAPI" name="test_login_invalid_password" time="0.012"><failure message="assert 422 == 401&#10; +  where 422 = &lt;Response [422 Unprocessable Entity]&gt;.status_code">self = &lt;test_api_auth.TestAuthAPI object at 0x1091c7a10&gt;
client = &lt;starlette.testclient.TestClient object at 0x10959cdd0&gt;
test_user = &lt;User testuser&gt;

    def test_login_invalid_password(self, client: TestClient, test_user):
        """測試用戶登錄無效密碼"""
        login_data = {
            "username": test_user.username,
            "password": "wrongpassword"
        }
    
        with patch("app.auth.verify_password", return_value=False):
            response = client.post("/api/auth/login", data=login_data)
    
&gt;       assert response.status_code == 401
E       assert 422 == 401
E        +  where 422 = &lt;Response [422 Unprocessable Entity]&gt;.status_code

tests/test_api_auth.py:139: AssertionError</failure></testcase><testcase classname="tests.test_api_auth.TestAuthAPI" name="test_login_inactive_user" time="0.012"><failure message="assert 422 == 401&#10; +  where 422 = &lt;Response [422 Unprocessable Entity]&gt;.status_code">self = &lt;test_api_auth.TestAuthAPI object at 0x1091c7fb0&gt;
client = &lt;starlette.testclient.TestClient object at 0x109419280&gt;
db = &lt;sqlalchemy.orm.session.Session object at 0x10941aa50&gt;

    def test_login_inactive_user(self, client: TestClient, db):
        """測試登錄非活躍用戶"""
        # 創建非活躍用戶
        inactive_user = User(
            username="inactive",
            email="inactive@example.com",
            hashed_password="hashed_password",
            is_active=False
        )
        db.add(inactive_user)
        db.commit()
    
        login_data = {
            "username": "inactive",
            "password": "password123"
        }
    
        with patch("app.auth.verify_password", return_value=True):
            response = client.post("/api/auth/login", data=login_data)
    
&gt;       assert response.status_code == 401
E       assert 422 == 401
E        +  where 422 = &lt;Response [422 Unprocessable Entity]&gt;.status_code

tests/test_api_auth.py:163: AssertionError</failure></testcase><testcase classname="tests.test_api_auth.TestAuthAPI" name="test_get_current_user_success" time="0.029"><failure message="sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users&#10;[SQL: SELECT users.email AS users_email, users.username AS users_username, users.full_name AS users_full_name, users.hashed_password AS users_hashed_password, users.phone AS users_phone, users.address AS users_address, users.is_active AS users_is_active, users.is_admin AS users_is_admin, users.is_verified AS users_is_verified, users.role AS users_role, users.id AS users_id, users.created_at AS users_created_at, users.updated_at AS users_updated_at &#10;FROM users &#10;WHERE users.username = ?&#10; LIMIT ? OFFSET ?]&#10;[parameters: ('testuser', 1, 0)]&#10;(Background on this error at: https://sqlalche.me/e/20/e3q8)">self = &lt;sqlalchemy.engine.base.Connection object at 0x10959ea50&gt;
dialect = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x1063bd850&gt;
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x10959c7d0&gt;
statement = &lt;sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x10959c8f0&gt;
parameters = [('testuser', 1, 0)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -&gt; CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
&gt;                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1969: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x1063bd850&gt;
cursor = &lt;sqlite3.Cursor object at 0x10955c040&gt;
statement = 'SELECT users.email AS users_email, users.username AS users_username, users.full_name AS users_full_name, users.hashed...t AS users_created_at, users.updated_at AS users_updated_at \nFROM users \nWHERE users.username = ?\n LIMIT ? OFFSET ?'
parameters = ('testuser', 1, 0)
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x10959c7d0&gt;

    def do_execute(self, cursor, statement, parameters, context=None):
&gt;       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: users

.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:922: OperationalError

The above exception was the direct cause of the following exception:

self = &lt;test_api_auth.TestAuthAPI object at 0x1091c78f0&gt;
client = &lt;starlette.testclient.TestClient object at 0x109579310&gt;
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0dXNlciIsImV4cCI6MTc1MjEyMDA4Mn0.edXtP5078OacxRpQpVqVjN1Oes1EMQS6WXG6FbjklPo'}

    def test_get_current_user_success(self, client: TestClient, auth_headers):
        """測試獲取當前用戶成功"""
&gt;       response = client.get("/api/auth/me", headers=auth_headers)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_api_auth.py:169: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/starlette/testclient.py:514: in get
    return super().get(
.venv/lib/python3.12/site-packages/httpx/_client.py:1041: in get
    return self.request(
.venv/lib/python3.12/site-packages/starlette/testclient.py:484: in request
    return super().request(
.venv/lib/python3.12/site-packages/httpx/_client.py:814: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/httpx/_client.py:901: in send
    response = self._send_handling_auth(
.venv/lib/python3.12/site-packages/httpx/_client.py:929: in _send_handling_auth
    response = self._send_handling_redirects(
.venv/lib/python3.12/site-packages/httpx/_client.py:966: in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/httpx/_client.py:1002: in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/starlette/testclient.py:377: in handle_request
    raise exc
.venv/lib/python3.12/site-packages/starlette/testclient.py:374: in handle_request
    portal.call(self.app, scope, receive, send)
.venv/lib/python3.12/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.12/3.12.10/Frameworks/Python.framework/Versions/3.12/lib/python3.12/concurrent/futures/_base.py:456: in result
    return self.__get_result()
           ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.12/3.12.10/Frameworks/Python.framework/Versions/3.12/lib/python3.12/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
.venv/lib/python3.12/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
             ^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/applications.py:113: in __call__
    await self.middleware_stack(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:187: in __call__
    raise exc
.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:165: in __call__
    await self.app(scope, receive, _send)
.venv/lib/python3.12/site-packages/starlette/middleware/cors.py:85: in __call__
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/sessions.py:85: in __call__
    await self.app(scope, receive, send_wrapper)
app/utils/logger.py:149: in __call__
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/exceptions.py:62: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    raise exc
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:42: in wrapped_app
    await app(scope, receive, sender)
.venv/lib/python3.12/site-packages/starlette/routing.py:715: in __call__
    await self.middleware_stack(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:735: in app
    await route.handle(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:288: in handle
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:76: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    raise exc
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:42: in wrapped_app
    await app(scope, receive, sender)
.venv/lib/python3.12/site-packages/starlette/routing.py:73: in app
    response = await f(request)
               ^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/fastapi/routing.py:291: in app
    solved_result = await solve_dependencies(
.venv/lib/python3.12/site-packages/fastapi/dependencies/utils.py:615: in solve_dependencies
    solved_result = await solve_dependencies(
.venv/lib/python3.12/site-packages/fastapi/dependencies/utils.py:640: in solve_dependencies
    solved = await run_in_threadpool(call, **solved_result.values)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/starlette/concurrency.py:39: in run_in_threadpool
    return await anyio.to_thread.run_sync(func, *args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/anyio/to_thread.py:56: in run_sync
    return await get_async_backend().run_sync_in_worker_thread(
.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py:2470: in run_sync_in_worker_thread
    return await future
           ^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py:967: in run
    result = context.run(func, *args)
             ^^^^^^^^^^^^^^^^^^^^^^^^
app/auth.py:66: in get_current_user
    user = db.query(User).filter(User.username == token_data.username).first()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/query.py:2748: in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/query.py:2847: in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2308: in execute
    return self._execute_internal(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2190: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/context.py:293: in orm_execute_statement
    result = conn.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:516: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1639: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1848: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1988: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2343: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1969: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x1063bd850&gt;
cursor = &lt;sqlite3.Cursor object at 0x10955c040&gt;
statement = 'SELECT users.email AS users_email, users.username AS users_username, users.full_name AS users_full_name, users.hashed...t AS users_created_at, users.updated_at AS users_updated_at \nFROM users \nWHERE users.username = ?\n LIMIT ? OFFSET ?'
parameters = ('testuser', 1, 0)
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x10959c7d0&gt;

    def do_execute(self, cursor, statement, parameters, context=None):
&gt;       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users
E       [SQL: SELECT users.email AS users_email, users.username AS users_username, users.full_name AS users_full_name, users.hashed_password AS users_hashed_password, users.phone AS users_phone, users.address AS users_address, users.is_active AS users_is_active, users.is_admin AS users_is_admin, users.is_verified AS users_is_verified, users.role AS users_role, users.id AS users_id, users.created_at AS users_created_at, users.updated_at AS users_updated_at 
E       FROM users 
E       WHERE users.username = ?
E        LIMIT ? OFFSET ?]
E       [parameters: ('testuser', 1, 0)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:922: OperationalError</failure></testcase><testcase classname="tests.test_api_auth.TestAuthAPI" name="test_get_current_user_no_token" time="0.012"><failure message="assert 403 == 401&#10; +  where 403 = &lt;Response [403 Forbidden]&gt;.status_code">self = &lt;test_api_auth.TestAuthAPI object at 0x1091c7bc0&gt;
client = &lt;starlette.testclient.TestClient object at 0x1095790a0&gt;

    def test_get_current_user_no_token(self, client: TestClient):
        """測試獲取當前用戶無令牌"""
        response = client.get("/api/auth/me")
    
&gt;       assert response.status_code == 401
E       assert 403 == 401
E        +  where 403 = &lt;Response [403 Forbidden]&gt;.status_code

tests/test_api_auth.py:183: AssertionError</failure></testcase><testcase classname="tests.test_api_auth.TestAuthAPI" name="test_get_current_user_invalid_token" time="0.012"><failure message="AssertionError: assert 'Invalid token' in '無法驗證身份'">self = &lt;test_api_auth.TestAuthAPI object at 0x1091c77a0&gt;
client = &lt;starlette.testclient.TestClient object at 0x1095de4e0&gt;

    def test_get_current_user_invalid_token(self, client: TestClient):
        """測試獲取當前用戶無效令牌"""
        headers = {"Authorization": "Bearer invalid_token"}
        response = client.get("/api/auth/me", headers=headers)
    
        assert response.status_code == 401
        data = response.json()
&gt;       assert "Invalid token" in data["detail"]
E       AssertionError: assert 'Invalid token' in '無法驗證身份'

tests/test_api_auth.py:194: AssertionError</failure></testcase><testcase classname="tests.test_api_auth.TestAuthAPI" name="test_refresh_token_success" time="0.012"><failure message="KeyError: 'refresh_token'">self = &lt;test_api_auth.TestAuthAPI object at 0x1091c75f0&gt;
client = &lt;starlette.testclient.TestClient object at 0x1095a7a10&gt;
test_user = &lt;User testuser&gt;

    def test_refresh_token_success(self, client: TestClient, test_user):
        """測試刷新令牌成功"""
        # 先登錄獲取刷新令牌
        login_data = {
            "username": test_user.username,
            "password": "password123"
        }
    
        with patch("app.auth.verify_password", return_value=True):
            login_response = client.post("/api/auth/login", data=login_data)
    
&gt;       refresh_token = login_response.json()["refresh_token"]
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       KeyError: 'refresh_token'

tests/test_api_auth.py:207: KeyError</failure></testcase><testcase classname="tests.test_api_auth.TestAuthAPI" name="test_refresh_token_invalid" time="0.011"><failure message="AttributeError: &lt;module 'app.auth' from '/Users/james/Project/BlogCommerce/app/auth.py'&gt; does not have the attribute 'verify_refresh_token'">self = &lt;test_api_auth.TestAuthAPI object at 0x1091c73b0&gt;
client = &lt;starlette.testclient.TestClient object at 0x1095a7bc0&gt;

    def test_refresh_token_invalid(self, client: TestClient):
        """測試刷新無效令牌"""
        refresh_data = {"refresh_token": "invalid_refresh_token"}
    
&gt;       with patch("app.auth.verify_refresh_token", return_value=None):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_api_auth.py:225: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.12/3.12.10/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:1467: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;unittest.mock._patch object at 0x1095a57c0&gt;

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
&gt;           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: &lt;module 'app.auth' from '/Users/james/Project/BlogCommerce/app/auth.py'&gt; does not have the attribute 'verify_refresh_token'

/opt/homebrew/Cellar/python@3.12/3.12.10/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:1437: AttributeError</failure></testcase><testcase classname="tests.test_api_auth.TestAuthAPI" name="test_logout_success" time="0.012"><failure message="assert 405 == 200&#10; +  where 405 = &lt;Response [405 Method Not Allowed]&gt;.status_code">self = &lt;test_api_auth.TestAuthAPI object at 0x1091c6f60&gt;
client = &lt;starlette.testclient.TestClient object at 0x10a5ef5c0&gt;
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0dXNlciIsImV4cCI6MTc1MjEyMDA4M30.P81GxZ-Qg0t4qE4JHQOEUNtTUQQoiDXkn-Jjj75grqo'}

    def test_logout_success(self, client: TestClient, auth_headers):
        """測試用戶登出成功"""
        response = client.post("/api/auth/logout", headers=auth_headers)
    
&gt;       assert response.status_code == 200
E       assert 405 == 200
E        +  where 405 = &lt;Response [405 Method Not Allowed]&gt;.status_code

tests/test_api_auth.py:236: AssertionError</failure></testcase><testcase classname="tests.test_api_auth.TestAuthAPI" name="test_logout_no_token" time="0.011"><failure message="assert 405 == 401&#10; +  where 405 = &lt;Response [405 Method Not Allowed]&gt;.status_code">self = &lt;test_api_auth.TestAuthAPI object at 0x1091c6e10&gt;
client = &lt;starlette.testclient.TestClient object at 0x10a5fc140&gt;

    def test_logout_no_token(self, client: TestClient):
        """測試登出無令牌"""
        response = client.post("/api/auth/logout")
    
&gt;       assert response.status_code == 401
E       assert 405 == 401
E        +  where 405 = &lt;Response [405 Method Not Allowed]&gt;.status_code

tests/test_api_auth.py:244: AssertionError</failure></testcase><testcase classname="tests.test_api_auth.TestAuthAPI" name="test_change_password_success" time="0.014"><failure message="sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users&#10;[SQL: SELECT users.email AS users_email, users.username AS users_username, users.full_name AS users_full_name, users.hashed_password AS users_hashed_password, users.phone AS users_phone, users.address AS users_address, users.is_active AS users_is_active, users.is_admin AS users_is_admin, users.is_verified AS users_is_verified, users.role AS users_role, users.id AS users_id, users.created_at AS users_created_at, users.updated_at AS users_updated_at &#10;FROM users &#10;WHERE users.username = ?&#10; LIMIT ? OFFSET ?]&#10;[parameters: ('testuser', 1, 0)]&#10;(Background on this error at: https://sqlalche.me/e/20/e3q8)">self = &lt;sqlalchemy.engine.base.Connection object at 0x10959fa10&gt;
dialect = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x1063bd850&gt;
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x10959cdd0&gt;
statement = &lt;sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x10959c8f0&gt;
parameters = [('testuser', 1, 0)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -&gt; CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
&gt;                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1969: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x1063bd850&gt;
cursor = &lt;sqlite3.Cursor object at 0x10a74ea40&gt;
statement = 'SELECT users.email AS users_email, users.username AS users_username, users.full_name AS users_full_name, users.hashed...t AS users_created_at, users.updated_at AS users_updated_at \nFROM users \nWHERE users.username = ?\n LIMIT ? OFFSET ?'
parameters = ('testuser', 1, 0)
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x10959cdd0&gt;

    def do_execute(self, cursor, statement, parameters, context=None):
&gt;       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: users

.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:922: OperationalError

The above exception was the direct cause of the following exception:

self = &lt;test_api_auth.TestAuthAPI object at 0x1090f8fe0&gt;
client = &lt;starlette.testclient.TestClient object at 0x10a5fe210&gt;
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0dXNlciIsImV4cCI6MTc1MjEyMDA4M30.P81GxZ-Qg0t4qE4JHQOEUNtTUQQoiDXkn-Jjj75grqo'}

    def test_change_password_success(self, client: TestClient, auth_headers):
        """測試更改密碼成功"""
        password_data = {
            "old_password": "password123",
            "new_password": "newpassword123"
        }
    
        with patch("app.auth.verify_password", return_value=True):
&gt;           response = client.post("/api/auth/change-password", json=password_data, headers=auth_headers)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_api_auth.py:256: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/starlette/testclient.py:593: in post
    return super().post(
.venv/lib/python3.12/site-packages/httpx/_client.py:1132: in post
    return self.request(
.venv/lib/python3.12/site-packages/starlette/testclient.py:484: in request
    return super().request(
.venv/lib/python3.12/site-packages/httpx/_client.py:814: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/httpx/_client.py:901: in send
    response = self._send_handling_auth(
.venv/lib/python3.12/site-packages/httpx/_client.py:929: in _send_handling_auth
    response = self._send_handling_redirects(
.venv/lib/python3.12/site-packages/httpx/_client.py:966: in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/httpx/_client.py:1002: in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/starlette/testclient.py:377: in handle_request
    raise exc
.venv/lib/python3.12/site-packages/starlette/testclient.py:374: in handle_request
    portal.call(self.app, scope, receive, send)
.venv/lib/python3.12/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.12/3.12.10/Frameworks/Python.framework/Versions/3.12/lib/python3.12/concurrent/futures/_base.py:456: in result
    return self.__get_result()
           ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.12/3.12.10/Frameworks/Python.framework/Versions/3.12/lib/python3.12/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
.venv/lib/python3.12/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
             ^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/applications.py:113: in __call__
    await self.middleware_stack(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:187: in __call__
    raise exc
.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:165: in __call__
    await self.app(scope, receive, _send)
.venv/lib/python3.12/site-packages/starlette/middleware/cors.py:85: in __call__
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/sessions.py:85: in __call__
    await self.app(scope, receive, send_wrapper)
app/utils/logger.py:149: in __call__
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/exceptions.py:62: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    raise exc
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:42: in wrapped_app
    await app(scope, receive, sender)
.venv/lib/python3.12/site-packages/starlette/routing.py:715: in __call__
    await self.middleware_stack(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:735: in app
    await route.handle(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:288: in handle
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:76: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    raise exc
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:42: in wrapped_app
    await app(scope, receive, sender)
.venv/lib/python3.12/site-packages/starlette/routing.py:73: in app
    response = await f(request)
               ^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/fastapi/routing.py:291: in app
    solved_result = await solve_dependencies(
.venv/lib/python3.12/site-packages/fastapi/dependencies/utils.py:615: in solve_dependencies
    solved_result = await solve_dependencies(
.venv/lib/python3.12/site-packages/fastapi/dependencies/utils.py:640: in solve_dependencies
    solved = await run_in_threadpool(call, **solved_result.values)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/starlette/concurrency.py:39: in run_in_threadpool
    return await anyio.to_thread.run_sync(func, *args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/anyio/to_thread.py:56: in run_sync
    return await get_async_backend().run_sync_in_worker_thread(
.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py:2470: in run_sync_in_worker_thread
    return await future
           ^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py:967: in run
    result = context.run(func, *args)
             ^^^^^^^^^^^^^^^^^^^^^^^^
app/auth.py:66: in get_current_user
    user = db.query(User).filter(User.username == token_data.username).first()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/query.py:2748: in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/query.py:2847: in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2308: in execute
    return self._execute_internal(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2190: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/context.py:293: in orm_execute_statement
    result = conn.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:516: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1639: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1848: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1988: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2343: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1969: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x1063bd850&gt;
cursor = &lt;sqlite3.Cursor object at 0x10a74ea40&gt;
statement = 'SELECT users.email AS users_email, users.username AS users_username, users.full_name AS users_full_name, users.hashed...t AS users_created_at, users.updated_at AS users_updated_at \nFROM users \nWHERE users.username = ?\n LIMIT ? OFFSET ?'
parameters = ('testuser', 1, 0)
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x10959cdd0&gt;

    def do_execute(self, cursor, statement, parameters, context=None):
&gt;       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users
E       [SQL: SELECT users.email AS users_email, users.username AS users_username, users.full_name AS users_full_name, users.hashed_password AS users_hashed_password, users.phone AS users_phone, users.address AS users_address, users.is_active AS users_is_active, users.is_admin AS users_is_admin, users.is_verified AS users_is_verified, users.role AS users_role, users.id AS users_id, users.created_at AS users_created_at, users.updated_at AS users_updated_at 
E       FROM users 
E       WHERE users.username = ?
E        LIMIT ? OFFSET ?]
E       [parameters: ('testuser', 1, 0)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:922: OperationalError</failure></testcase><testcase classname="tests.test_api_auth.TestAuthAPI" name="test_change_password_wrong_old_password" time="0.015"><failure message="sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users&#10;[SQL: SELECT users.email AS users_email, users.username AS users_username, users.full_name AS users_full_name, users.hashed_password AS users_hashed_password, users.phone AS users_phone, users.address AS users_address, users.is_active AS users_is_active, users.is_admin AS users_is_admin, users.is_verified AS users_is_verified, users.role AS users_role, users.id AS users_id, users.created_at AS users_created_at, users.updated_at AS users_updated_at &#10;FROM users &#10;WHERE users.username = ?&#10; LIMIT ? OFFSET ?]&#10;[parameters: ('testuser', 1, 0)]&#10;(Background on this error at: https://sqlalche.me/e/20/e3q8)">self = &lt;sqlalchemy.engine.base.Connection object at 0x10957aae0&gt;
dialect = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x1063bd850&gt;
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x10a5ed250&gt;
statement = &lt;sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x10959c8f0&gt;
parameters = [('testuser', 1, 0)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -&gt; CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
&gt;                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1969: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x1063bd850&gt;
cursor = &lt;sqlite3.Cursor object at 0x10cc17040&gt;
statement = 'SELECT users.email AS users_email, users.username AS users_username, users.full_name AS users_full_name, users.hashed...t AS users_created_at, users.updated_at AS users_updated_at \nFROM users \nWHERE users.username = ?\n LIMIT ? OFFSET ?'
parameters = ('testuser', 1, 0)
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x10a5ed250&gt;

    def do_execute(self, cursor, statement, parameters, context=None):
&gt;       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: users

.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:922: OperationalError

The above exception was the direct cause of the following exception:

self = &lt;test_api_auth.TestAuthAPI object at 0x1091c7230&gt;
client = &lt;starlette.testclient.TestClient object at 0x10a5ff080&gt;
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0dXNlciIsImV4cCI6MTc1MjEyMDA4M30.P81GxZ-Qg0t4qE4JHQOEUNtTUQQoiDXkn-Jjj75grqo'}

    def test_change_password_wrong_old_password(self, client: TestClient, auth_headers):
        """測試更改密碼錯誤舊密碼"""
        password_data = {
            "old_password": "wrongpassword",
            "new_password": "newpassword123"
        }
    
        with patch("app.auth.verify_password", return_value=False):
&gt;           response = client.post("/api/auth/change-password", json=password_data, headers=auth_headers)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_api_auth.py:270: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/starlette/testclient.py:593: in post
    return super().post(
.venv/lib/python3.12/site-packages/httpx/_client.py:1132: in post
    return self.request(
.venv/lib/python3.12/site-packages/starlette/testclient.py:484: in request
    return super().request(
.venv/lib/python3.12/site-packages/httpx/_client.py:814: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/httpx/_client.py:901: in send
    response = self._send_handling_auth(
.venv/lib/python3.12/site-packages/httpx/_client.py:929: in _send_handling_auth
    response = self._send_handling_redirects(
.venv/lib/python3.12/site-packages/httpx/_client.py:966: in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/httpx/_client.py:1002: in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/starlette/testclient.py:377: in handle_request
    raise exc
.venv/lib/python3.12/site-packages/starlette/testclient.py:374: in handle_request
    portal.call(self.app, scope, receive, send)
.venv/lib/python3.12/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.12/3.12.10/Frameworks/Python.framework/Versions/3.12/lib/python3.12/concurrent/futures/_base.py:456: in result
    return self.__get_result()
           ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.12/3.12.10/Frameworks/Python.framework/Versions/3.12/lib/python3.12/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
.venv/lib/python3.12/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
             ^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/applications.py:113: in __call__
    await self.middleware_stack(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:187: in __call__
    raise exc
.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:165: in __call__
    await self.app(scope, receive, _send)
.venv/lib/python3.12/site-packages/starlette/middleware/cors.py:85: in __call__
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/sessions.py:85: in __call__
    await self.app(scope, receive, send_wrapper)
app/utils/logger.py:149: in __call__
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/exceptions.py:62: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    raise exc
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:42: in wrapped_app
    await app(scope, receive, sender)
.venv/lib/python3.12/site-packages/starlette/routing.py:715: in __call__
    await self.middleware_stack(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:735: in app
    await route.handle(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:288: in handle
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:76: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    raise exc
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:42: in wrapped_app
    await app(scope, receive, sender)
.venv/lib/python3.12/site-packages/starlette/routing.py:73: in app
    response = await f(request)
               ^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/fastapi/routing.py:291: in app
    solved_result = await solve_dependencies(
.venv/lib/python3.12/site-packages/fastapi/dependencies/utils.py:615: in solve_dependencies
    solved_result = await solve_dependencies(
.venv/lib/python3.12/site-packages/fastapi/dependencies/utils.py:640: in solve_dependencies
    solved = await run_in_threadpool(call, **solved_result.values)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/starlette/concurrency.py:39: in run_in_threadpool
    return await anyio.to_thread.run_sync(func, *args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/anyio/to_thread.py:56: in run_sync
    return await get_async_backend().run_sync_in_worker_thread(
.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py:2470: in run_sync_in_worker_thread
    return await future
           ^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py:967: in run
    result = context.run(func, *args)
             ^^^^^^^^^^^^^^^^^^^^^^^^
app/auth.py:66: in get_current_user
    user = db.query(User).filter(User.username == token_data.username).first()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/query.py:2748: in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/query.py:2847: in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2308: in execute
    return self._execute_internal(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2190: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/context.py:293: in orm_execute_statement
    result = conn.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:516: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1639: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1848: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1988: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2343: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1969: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x1063bd850&gt;
cursor = &lt;sqlite3.Cursor object at 0x10cc17040&gt;
statement = 'SELECT users.email AS users_email, users.username AS users_username, users.full_name AS users_full_name, users.hashed...t AS users_created_at, users.updated_at AS users_updated_at \nFROM users \nWHERE users.username = ?\n LIMIT ? OFFSET ?'
parameters = ('testuser', 1, 0)
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x10a5ed250&gt;

    def do_execute(self, cursor, statement, parameters, context=None):
&gt;       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users
E       [SQL: SELECT users.email AS users_email, users.username AS users_username, users.full_name AS users_full_name, users.hashed_password AS users_hashed_password, users.phone AS users_phone, users.address AS users_address, users.is_active AS users_is_active, users.is_admin AS users_is_admin, users.is_verified AS users_is_verified, users.role AS users_role, users.id AS users_id, users.created_at AS users_created_at, users.updated_at AS users_updated_at 
E       FROM users 
E       WHERE users.username = ?
E        LIMIT ? OFFSET ?]
E       [parameters: ('testuser', 1, 0)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:922: OperationalError</failure></testcase><testcase classname="tests.test_api_auth.TestAuthAPI" name="test_forgot_password_success" time="0.012"><failure message="AttributeError: module 'app.services' has no attribute 'email_service'. Did you mean: 'campaign_service'?">self = &lt;test_api_auth.TestAuthAPI object at 0x1091c7e60&gt;
client = &lt;starlette.testclient.TestClient object at 0x10a5fc860&gt;
test_user = &lt;User testuser&gt;

    def test_forgot_password_success(self, client: TestClient, test_user):
        """測試忘記密碼成功"""
        forgot_data = {"email": test_user.email}
    
&gt;       with patch("app.services.email_service.send_password_reset_email", return_value=True):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_api_auth.py:280: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.12/3.12.10/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:1451: in __enter__
    self.target = self.getter()
                  ^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'app.services.email_service'

    def resolve_name(name):
        """
        Resolve a name to an object.
    
        It is expected that `name` will be a string in one of the following
        formats, where W is shorthand for a valid Python identifier and dot stands
        for a literal period in these pseudo-regexes:
    
        W(.W)*
        W(.W)*:(W(.W)*)?
    
        The first form is intended for backward compatibility only. It assumes that
        some part of the dotted name is a package, and the rest is an object
        somewhere within that package, possibly nested inside other objects.
        Because the place where the package stops and the object hierarchy starts
        can't be inferred by inspection, repeated attempts to import must be done
        with this form.
    
        In the second form, the caller makes the division point clear through the
        provision of a single colon: the dotted name to the left of the colon is a
        package to be imported, and the dotted name to the right is the object
        hierarchy within that package. Only one import is needed in this form. If
        it ends with the colon, then a module object is returned.
    
        The function will return an object (which might be a module), or raise one
        of the following exceptions:
    
        ValueError - if `name` isn't in a recognised format
        ImportError - if an import failed when it shouldn't have
        AttributeError - if a failure occurred when traversing the object hierarchy
                         within the imported package to get to the desired object.
        """
        global _NAME_PATTERN
        if _NAME_PATTERN is None:
            # Lazy import to speedup Python startup time
            import re
            dotted_words = r'(?!\d)(\w+)(\.(?!\d)(\w+))*'
            _NAME_PATTERN = re.compile(f'^(?P&lt;pkg&gt;{dotted_words})'
                                       f'(?P&lt;cln&gt;:(?P&lt;obj&gt;{dotted_words})?)?$',
                                       re.UNICODE)
    
        m = _NAME_PATTERN.match(name)
        if not m:
            raise ValueError(f'invalid format: {name!r}')
        gd = m.groupdict()
        if gd.get('cln'):
            # there is a colon - a one-step import is all that's needed
            mod = importlib.import_module(gd['pkg'])
            parts = gd.get('obj')
            parts = parts.split('.') if parts else []
        else:
            # no colon - have to iterate to find the package boundary
            parts = name.split('.')
            modname = parts.pop(0)
            # first part *must* be a module/package.
            mod = importlib.import_module(modname)
            while parts:
                p = parts[0]
                s = f'{modname}.{p}'
                try:
                    mod = importlib.import_module(s)
                    parts.pop(0)
                    modname = s
                except ImportError:
                    break
        # if we reach this point, mod is the module, already imported, and
        # parts is the list of parts in the object hierarchy to be traversed, or
        # an empty list if just the module is wanted.
        result = mod
        for p in parts:
&gt;           result = getattr(result, p)
                     ^^^^^^^^^^^^^^^^^^
E           AttributeError: module 'app.services' has no attribute 'email_service'. Did you mean: 'campaign_service'?

/opt/homebrew/Cellar/python@3.12/3.12.10/Frameworks/Python.framework/Versions/3.12/lib/python3.12/pkgutil.py:528: AttributeError</failure></testcase><testcase classname="tests.test_api_auth.TestAuthAPI" name="test_forgot_password_nonexistent_email" time="0.011"><failure message="assert 405 == 404&#10; +  where 405 = &lt;Response [405 Method Not Allowed]&gt;.status_code">self = &lt;test_api_auth.TestAuthAPI object at 0x109254e60&gt;
client = &lt;starlette.testclient.TestClient object at 0x10a5fca10&gt;

    def test_forgot_password_nonexistent_email(self, client: TestClient):
        """測試忘記密碼不存在的郵箱"""
        forgot_data = {"email": "nonexistent@example.com"}
    
        response = client.post("/api/auth/forgot-password", json=forgot_data)
    
&gt;       assert response.status_code == 404
E       assert 405 == 404
E        +  where 405 = &lt;Response [405 Method Not Allowed]&gt;.status_code

tests/test_api_auth.py:293: AssertionError</failure></testcase><testcase classname="tests.test_api_auth.TestAuthAPI" name="test_reset_password_success" time="0.011"><failure message="AttributeError: &lt;module 'app.auth' from '/Users/james/Project/BlogCommerce/app/auth.py'&gt; does not have the attribute 'verify_password_reset_token'">self = &lt;test_api_auth.TestAuthAPI object at 0x1092550d0&gt;
client = &lt;starlette.testclient.TestClient object at 0x10a3ec4d0&gt;
test_user = &lt;User testuser&gt;

    def test_reset_password_success(self, client: TestClient, test_user):
        """測試重置密碼成功"""
        reset_data = {
            "token": "valid_reset_token",
            "new_password": "newpassword123"
        }
    
&gt;       with patch("app.auth.verify_password_reset_token", return_value=test_user):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_api_auth.py:304: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.12/3.12.10/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:1467: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;unittest.mock._patch object at 0x10a3ee330&gt;

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
&gt;           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: &lt;module 'app.auth' from '/Users/james/Project/BlogCommerce/app/auth.py'&gt; does not have the attribute 'verify_password_reset_token'

/opt/homebrew/Cellar/python@3.12/3.12.10/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:1437: AttributeError</failure></testcase><testcase classname="tests.test_api_auth.TestAuthAPI" name="test_reset_password_invalid_token" time="0.010"><failure message="AttributeError: &lt;module 'app.auth' from '/Users/james/Project/BlogCommerce/app/auth.py'&gt; does not have the attribute 'verify_password_reset_token'">self = &lt;test_api_auth.TestAuthAPI object at 0x1092552e0&gt;
client = &lt;starlette.testclient.TestClient object at 0x10a364a40&gt;

    def test_reset_password_invalid_token(self, client: TestClient):
        """測試重置密碼無效令牌"""
        reset_data = {
            "token": "invalid_reset_token",
            "new_password": "newpassword123"
        }
    
&gt;       with patch("app.auth.verify_password_reset_token", return_value=None):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_api_auth.py:318: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/homebrew/Cellar/python@3.12/3.12.10/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:1467: in __enter__
    original, local = self.get_original()
                      ^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;unittest.mock._patch object at 0x10a367d40&gt;

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
&gt;           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: &lt;module 'app.auth' from '/Users/james/Project/BlogCommerce/app/auth.py'&gt; does not have the attribute 'verify_password_reset_token'

/opt/homebrew/Cellar/python@3.12/3.12.10/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:1437: AttributeError</failure></testcase><testcase classname="tests.test_api_auth.TestAuthAPI" name="test_update_profile_success" time="0.012"><failure message="assert 405 == 200&#10; +  where 405 = &lt;Response [405 Method Not Allowed]&gt;.status_code">self = &lt;test_api_auth.TestAuthAPI object at 0x109254f20&gt;
client = &lt;starlette.testclient.TestClient object at 0x10a367cb0&gt;
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0dXNlciIsImV4cCI6MTc1MjEyMDA4M30.P81GxZ-Qg0t4qE4JHQOEUNtTUQQoiDXkn-Jjj75grqo'}

    def test_update_profile_success(self, client: TestClient, auth_headers):
        """測試更新個人資料成功"""
        profile_data = {
            "username": "updated_username",
            "email": "updated@example.com",
            "phone": "1234567890",
            "address": "更新後的地址"
        }
    
        response = client.put("/api/auth/profile", json=profile_data, headers=auth_headers)
    
&gt;       assert response.status_code == 200
E       assert 405 == 200
E        +  where 405 = &lt;Response [405 Method Not Allowed]&gt;.status_code

tests/test_api_auth.py:336: AssertionError</failure></testcase><testcase classname="tests.test_api_auth.TestAuthAPI" name="test_update_profile_duplicate_username" time="0.015"><failure message="assert 405 == 400&#10; +  where 405 = &lt;Response [405 Method Not Allowed]&gt;.status_code">self = &lt;test_api_auth.TestAuthAPI object at 0x109255940&gt;
client = &lt;starlette.testclient.TestClient object at 0x10a367c80&gt;
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0dXNlciIsImV4cCI6MTc1MjEyMDA4M30.P81GxZ-Qg0t4qE4JHQOEUNtTUQQoiDXkn-Jjj75grqo'}
test_admin_user = &lt;User admin&gt;

    def test_update_profile_duplicate_username(self, client: TestClient, auth_headers, test_admin_user):
        """測試更新個人資料重複用戶名"""
        profile_data = {
            "username": test_admin_user.username,
            "email": "newemail@example.com"
        }
    
        response = client.put("/api/auth/profile", json=profile_data, headers=auth_headers)
    
&gt;       assert response.status_code == 400
E       assert 405 == 400
E        +  where 405 = &lt;Response [405 Method Not Allowed]&gt;.status_code

tests/test_api_auth.py:351: AssertionError</failure></testcase><testcase classname="tests.test_api_auth.TestAuthAPI" name="test_admin_only_endpoint" time="0.012"><failure message="TypeError: 'NoneType' object is not subscriptable">self = &lt;test_api_auth.TestAuthAPI object at 0x109254770&gt;
client = &lt;starlette.testclient.TestClient object at 0x10a3ef170&gt;
admin_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTc1MjEyMDA4M30.oCC4DhJZmyylB6933-r_fS8kBM6wPGehB3qVKinrGBs'}

    def test_admin_only_endpoint(self, client: TestClient, admin_headers):
        """測試僅管理員端點"""
        response = client.get("/api/auth/admin-only", headers=admin_headers)
    
        assert response.status_code == 200
        data = response.json()
&gt;       assert data["message"] == "管理員專用端點"
               ^^^^^^^^^^^^^^^
E       TypeError: 'NoneType' object is not subscriptable

tests/test_api_auth.py:361: TypeError</failure></testcase><testcase classname="tests.test_api_auth.TestAuthAPI" name="test_admin_only_endpoint_regular_user" time="0.012"><failure message="assert 200 == 403&#10; +  where 200 = &lt;Response [200 OK]&gt;.status_code">self = &lt;test_api_auth.TestAuthAPI object at 0x1092542c0&gt;
client = &lt;starlette.testclient.TestClient object at 0x10a37f3b0&gt;
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0dXNlciIsImV4cCI6MTc1MjEyMDA4NH0.lYO7qamKj6pBljxQmzzsEs7uEF8Zl6aZo0eJmb82jw4'}

    def test_admin_only_endpoint_regular_user(self, client: TestClient, auth_headers):
        """測試僅管理員端點普通用戶"""
        response = client.get("/api/auth/admin-only", headers=auth_headers)
    
&gt;       assert response.status_code == 403
E       assert 200 == 403
E        +  where 200 = &lt;Response [200 OK]&gt;.status_code

tests/test_api_auth.py:367: AssertionError</failure></testcase><testcase classname="tests.test_api_auth.TestAuthAPI" name="test_admin_only_endpoint_no_auth" time="0.011"><failure message="assert 200 == 401&#10; +  where 200 = &lt;Response [200 OK]&gt;.status_code">self = &lt;test_api_auth.TestAuthAPI object at 0x1092540e0&gt;
client = &lt;starlette.testclient.TestClient object at 0x10a37cd70&gt;

    def test_admin_only_endpoint_no_auth(self, client: TestClient):
        """測試僅管理員端點無認證"""
        response = client.get("/api/auth/admin-only")
    
&gt;       assert response.status_code == 401
E       assert 200 == 401
E        +  where 200 = &lt;Response [200 OK]&gt;.status_code

tests/test_api_auth.py:375: AssertionError</failure></testcase><testcase classname="tests.test_api_products.TestProductsAPI" name="test_get_products_success" time="0.010"><error message="failed on setup with &quot;TypeError: 'stock' is an invalid keyword argument for Product&quot;">db = &lt;sqlalchemy.orm.session.Session object at 0x10a503ad0&gt;

    @pytest.fixture
    def test_product(db):
        """創建測試商品"""
&gt;       product = Product(
            name="測試商品",
            description="這是一個測試商品",
            price=100.0,
            stock=50,
            is_active=True,
            slug="test-product"
        )

tests/conftest.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:564: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Product 測試商品&gt;
kwargs = {'description': '這是一個測試商品', 'is_active': True, 'name': '測試商品', 'price': 100.0, ...}
cls_ = &lt;class 'app.models.product.Product'&gt;, k = 'stock'

    def _declarative_constructor(self: Any, **kwargs: Any) -&gt; None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
&gt;               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'stock' is an invalid keyword argument for Product

.venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2142: TypeError</error></testcase><testcase classname="tests.test_api_products.TestProductsAPI" name="test_get_products_with_filters" time="0.011"><error message="failed on setup with &quot;TypeError: 'stock' is an invalid keyword argument for Product&quot;">db = &lt;sqlalchemy.orm.session.Session object at 0x10a503b90&gt;

    @pytest.fixture
    def test_product(db):
        """創建測試商品"""
&gt;       product = Product(
            name="測試商品",
            description="這是一個測試商品",
            price=100.0,
            stock=50,
            is_active=True,
            slug="test-product"
        )

tests/conftest.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:564: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Product 測試商品&gt;
kwargs = {'description': '這是一個測試商品', 'is_active': True, 'name': '測試商品', 'price': 100.0, ...}
cls_ = &lt;class 'app.models.product.Product'&gt;, k = 'stock'

    def _declarative_constructor(self: Any, **kwargs: Any) -&gt; None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
&gt;               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'stock' is an invalid keyword argument for Product

.venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2142: TypeError</error></testcase><testcase classname="tests.test_api_products.TestProductsAPI" name="test_get_products_pagination" time="0.010"><failure message="TypeError: 'stock' is an invalid keyword argument for Product">self = &lt;test_api_products.TestProductsAPI object at 0x10926b260&gt;
client = &lt;starlette.testclient.TestClient object at 0x10a503bf0&gt;
db = &lt;sqlalchemy.orm.session.Session object at 0x10a502b70&gt;

    def test_get_products_pagination(self, client: TestClient, db):
        """測試商品分頁"""
        # 創建多個商品
        for i in range(15):
&gt;           product = Product(
                name=f"商品{i}",
                description=f"商品{i}描述",
                price=100.0 + i,
                stock=50,
                slug=f"product-{i}"
            )

tests/test_api_products.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
&lt;string&gt;:4: in __init__
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:564: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Product 商品0&gt;
kwargs = {'description': '商品0描述', 'name': '商品0', 'price': 100.0, 'slug': 'product-0', ...}
cls_ = &lt;class 'app.models.product.Product'&gt;, k = 'stock'

    def _declarative_constructor(self: Any, **kwargs: Any) -&gt; None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
&gt;               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'stock' is an invalid keyword argument for Product

.venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2142: TypeError</failure></testcase><testcase classname="tests.test_api_products.TestProductsAPI" name="test_get_product_by_id_success" time="0.011"><error message="failed on setup with &quot;TypeError: 'stock' is an invalid keyword argument for Product&quot;">db = &lt;sqlalchemy.orm.session.Session object at 0x10a5030b0&gt;

    @pytest.fixture
    def test_product(db):
        """創建測試商品"""
&gt;       product = Product(
            name="測試商品",
            description="這是一個測試商品",
            price=100.0,
            stock=50,
            is_active=True,
            slug="test-product"
        )

tests/conftest.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:564: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Product 測試商品&gt;
kwargs = {'description': '這是一個測試商品', 'is_active': True, 'name': '測試商品', 'price': 100.0, ...}
cls_ = &lt;class 'app.models.product.Product'&gt;, k = 'stock'

    def _declarative_constructor(self: Any, **kwargs: Any) -&gt; None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
&gt;               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'stock' is an invalid keyword argument for Product

.venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2142: TypeError</error></testcase><testcase classname="tests.test_api_products.TestProductsAPI" name="test_get_product_by_id_not_found" time="0.015"><failure message="sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: products&#10;[SQL: SELECT products.name AS products_name, products.description AS products_description, products.short_description AS products_short_description, products.price AS products_price, products.sale_price AS products_sale_price, products.stock_quantity AS products_stock_quantity, products.sku AS products_sku, products.featured_image AS products_featured_image, products.gallery_images AS products_gallery_images, products.is_active AS products_is_active, products.is_featured AS products_is_featured, products.meta_title AS products_meta_title, products.meta_description AS products_meta_description, products.meta_keywords AS products_meta_keywords, products.view_count AS products_view_count, products.id AS products_id, products.created_at AS products_created_at, products.updated_at AS products_updated_at, products.slug AS products_slug &#10;FROM products &#10;WHERE products.id = ?&#10; LIMIT ? OFFSET ?]&#10;[parameters: (999, 1, 0)]&#10;(Background on this error at: https://sqlalche.me/e/20/e3q8)">self = &lt;sqlalchemy.engine.base.Connection object at 0x10a5fcad0&gt;
dialect = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x1063bd850&gt;
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x10a3657c0&gt;
statement = &lt;sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x10a364530&gt;
parameters = [(999, 1, 0)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -&gt; CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
&gt;                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1969: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x1063bd850&gt;
cursor = &lt;sqlite3.Cursor object at 0x109541ac0&gt;
statement = 'SELECT products.name AS products_name, products.description AS products_description, products.short_description AS pr...d_at AS products_updated_at, products.slug AS products_slug \nFROM products \nWHERE products.id = ?\n LIMIT ? OFFSET ?'
parameters = (999, 1, 0)
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x10a3657c0&gt;

    def do_execute(self, cursor, statement, parameters, context=None):
&gt;       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: products

.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:922: OperationalError

The above exception was the direct cause of the following exception:

self = &lt;test_api_products.TestProductsAPI object at 0x10926b560&gt;
client = &lt;starlette.testclient.TestClient object at 0x10a5ef470&gt;

    def test_get_product_by_id_not_found(self, client: TestClient):
        """測試通過 ID 獲取不存在的商品"""
&gt;       response = client.get("/api/products/999")
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_api_products.py:75: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/starlette/testclient.py:514: in get
    return super().get(
.venv/lib/python3.12/site-packages/httpx/_client.py:1041: in get
    return self.request(
.venv/lib/python3.12/site-packages/starlette/testclient.py:484: in request
    return super().request(
.venv/lib/python3.12/site-packages/httpx/_client.py:814: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/httpx/_client.py:901: in send
    response = self._send_handling_auth(
.venv/lib/python3.12/site-packages/httpx/_client.py:929: in _send_handling_auth
    response = self._send_handling_redirects(
.venv/lib/python3.12/site-packages/httpx/_client.py:966: in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/httpx/_client.py:1002: in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/starlette/testclient.py:377: in handle_request
    raise exc
.venv/lib/python3.12/site-packages/starlette/testclient.py:374: in handle_request
    portal.call(self.app, scope, receive, send)
.venv/lib/python3.12/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.12/3.12.10/Frameworks/Python.framework/Versions/3.12/lib/python3.12/concurrent/futures/_base.py:456: in result
    return self.__get_result()
           ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.12/3.12.10/Frameworks/Python.framework/Versions/3.12/lib/python3.12/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
.venv/lib/python3.12/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
             ^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/applications.py:113: in __call__
    await self.middleware_stack(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:187: in __call__
    raise exc
.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:165: in __call__
    await self.app(scope, receive, _send)
.venv/lib/python3.12/site-packages/starlette/middleware/cors.py:85: in __call__
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/sessions.py:85: in __call__
    await self.app(scope, receive, send_wrapper)
app/utils/logger.py:149: in __call__
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/exceptions.py:62: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    raise exc
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:42: in wrapped_app
    await app(scope, receive, sender)
.venv/lib/python3.12/site-packages/starlette/routing.py:715: in __call__
    await self.middleware_stack(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:735: in app
    await route.handle(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:288: in handle
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:76: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    raise exc
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:42: in wrapped_app
    await app(scope, receive, sender)
.venv/lib/python3.12/site-packages/starlette/routing.py:73: in app
    response = await f(request)
               ^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/fastapi/routing.py:301: in app
    raw_response = await run_endpoint_function(
.venv/lib/python3.12/site-packages/fastapi/routing.py:214: in run_endpoint_function
    return await run_in_threadpool(dependant.call, **values)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/starlette/concurrency.py:39: in run_in_threadpool
    return await anyio.to_thread.run_sync(func, *args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/anyio/to_thread.py:56: in run_sync
    return await get_async_backend().run_sync_in_worker_thread(
.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py:2470: in run_sync_in_worker_thread
    return await future
           ^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py:967: in run
    result = context.run(func, *args)
             ^^^^^^^^^^^^^^^^^^^^^^^^
app/routes/products.py:166: in get_product
    product = db.query(Product).filter(Product.id == product_id).first()
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/query.py:2748: in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/query.py:2847: in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2308: in execute
    return self._execute_internal(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2190: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/context.py:293: in orm_execute_statement
    result = conn.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:516: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1639: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1848: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1988: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2343: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1969: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x1063bd850&gt;
cursor = &lt;sqlite3.Cursor object at 0x109541ac0&gt;
statement = 'SELECT products.name AS products_name, products.description AS products_description, products.short_description AS pr...d_at AS products_updated_at, products.slug AS products_slug \nFROM products \nWHERE products.id = ?\n LIMIT ? OFFSET ?'
parameters = (999, 1, 0)
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x10a3657c0&gt;

    def do_execute(self, cursor, statement, parameters, context=None):
&gt;       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: products
E       [SQL: SELECT products.name AS products_name, products.description AS products_description, products.short_description AS products_short_description, products.price AS products_price, products.sale_price AS products_sale_price, products.stock_quantity AS products_stock_quantity, products.sku AS products_sku, products.featured_image AS products_featured_image, products.gallery_images AS products_gallery_images, products.is_active AS products_is_active, products.is_featured AS products_is_featured, products.meta_title AS products_meta_title, products.meta_description AS products_meta_description, products.meta_keywords AS products_meta_keywords, products.view_count AS products_view_count, products.id AS products_id, products.created_at AS products_created_at, products.updated_at AS products_updated_at, products.slug AS products_slug 
E       FROM products 
E       WHERE products.id = ?
E        LIMIT ? OFFSET ?]
E       [parameters: (999, 1, 0)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:922: OperationalError</failure></testcase><testcase classname="tests.test_api_products.TestProductsAPI" name="test_get_product_by_slug_success" time="0.011"><error message="failed on setup with &quot;TypeError: 'stock' is an invalid keyword argument for Product&quot;">db = &lt;sqlalchemy.orm.session.Session object at 0x10a367230&gt;

    @pytest.fixture
    def test_product(db):
        """創建測試商品"""
&gt;       product = Product(
            name="測試商品",
            description="這是一個測試商品",
            price=100.0,
            stock=50,
            is_active=True,
            slug="test-product"
        )

tests/conftest.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:564: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Product 測試商品&gt;
kwargs = {'description': '這是一個測試商品', 'is_active': True, 'name': '測試商品', 'price': 100.0, ...}
cls_ = &lt;class 'app.models.product.Product'&gt;, k = 'stock'

    def _declarative_constructor(self: Any, **kwargs: Any) -&gt; None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
&gt;               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'stock' is an invalid keyword argument for Product

.venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2142: TypeError</error></testcase><testcase classname="tests.test_api_products.TestProductsAPI" name="test_get_product_by_slug_not_found" time="0.014"><failure message="sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: products&#10;[SQL: SELECT products.name AS products_name, products.description AS products_description, products.short_description AS products_short_description, products.price AS products_price, products.sale_price AS products_sale_price, products.stock_quantity AS products_stock_quantity, products.sku AS products_sku, products.featured_image AS products_featured_image, products.gallery_images AS products_gallery_images, products.is_active AS products_is_active, products.is_featured AS products_is_featured, products.meta_title AS products_meta_title, products.meta_description AS products_meta_description, products.meta_keywords AS products_meta_keywords, products.view_count AS products_view_count, products.id AS products_id, products.created_at AS products_created_at, products.updated_at AS products_updated_at, products.slug AS products_slug &#10;FROM products &#10;WHERE products.slug = ?&#10; LIMIT ? OFFSET ?]&#10;[parameters: ('nonexistent', 1, 0)]&#10;(Background on this error at: https://sqlalche.me/e/20/e3q8)">self = &lt;sqlalchemy.engine.base.Connection object at 0x109453170&gt;
dialect = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x1063bd850&gt;
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x10a367140&gt;
statement = &lt;sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x10a366cf0&gt;
parameters = [('nonexistent', 1, 0)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -&gt; CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
&gt;                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1969: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x1063bd850&gt;
cursor = &lt;sqlite3.Cursor object at 0x10d060ec0&gt;
statement = 'SELECT products.name AS products_name, products.description AS products_description, products.short_description AS pr...at AS products_updated_at, products.slug AS products_slug \nFROM products \nWHERE products.slug = ?\n LIMIT ? OFFSET ?'
parameters = ('nonexistent', 1, 0)
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x10a367140&gt;

    def do_execute(self, cursor, statement, parameters, context=None):
&gt;       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: products

.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:922: OperationalError

The above exception was the direct cause of the following exception:

self = &lt;test_api_products.TestProductsAPI object at 0x10926ac60&gt;
client = &lt;starlette.testclient.TestClient object at 0x10a5efb90&gt;

    def test_get_product_by_slug_not_found(self, client: TestClient):
        """測試通過 slug 獲取不存在的商品"""
&gt;       response = client.get("/api/products/slug/nonexistent")
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_api_products.py:93: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/starlette/testclient.py:514: in get
    return super().get(
.venv/lib/python3.12/site-packages/httpx/_client.py:1041: in get
    return self.request(
.venv/lib/python3.12/site-packages/starlette/testclient.py:484: in request
    return super().request(
.venv/lib/python3.12/site-packages/httpx/_client.py:814: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/httpx/_client.py:901: in send
    response = self._send_handling_auth(
.venv/lib/python3.12/site-packages/httpx/_client.py:929: in _send_handling_auth
    response = self._send_handling_redirects(
.venv/lib/python3.12/site-packages/httpx/_client.py:966: in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/httpx/_client.py:1002: in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/starlette/testclient.py:377: in handle_request
    raise exc
.venv/lib/python3.12/site-packages/starlette/testclient.py:374: in handle_request
    portal.call(self.app, scope, receive, send)
.venv/lib/python3.12/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.12/3.12.10/Frameworks/Python.framework/Versions/3.12/lib/python3.12/concurrent/futures/_base.py:456: in result
    return self.__get_result()
           ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.12/3.12.10/Frameworks/Python.framework/Versions/3.12/lib/python3.12/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
.venv/lib/python3.12/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
             ^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/applications.py:113: in __call__
    await self.middleware_stack(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:187: in __call__
    raise exc
.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:165: in __call__
    await self.app(scope, receive, _send)
.venv/lib/python3.12/site-packages/starlette/middleware/cors.py:85: in __call__
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/sessions.py:85: in __call__
    await self.app(scope, receive, send_wrapper)
app/utils/logger.py:149: in __call__
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/exceptions.py:62: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    raise exc
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:42: in wrapped_app
    await app(scope, receive, sender)
.venv/lib/python3.12/site-packages/starlette/routing.py:715: in __call__
    await self.middleware_stack(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:735: in app
    await route.handle(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:288: in handle
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:76: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    raise exc
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:42: in wrapped_app
    await app(scope, receive, sender)
.venv/lib/python3.12/site-packages/starlette/routing.py:73: in app
    response = await f(request)
               ^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/fastapi/routing.py:301: in app
    raw_response = await run_endpoint_function(
.venv/lib/python3.12/site-packages/fastapi/routing.py:214: in run_endpoint_function
    return await run_in_threadpool(dependant.call, **values)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/starlette/concurrency.py:39: in run_in_threadpool
    return await anyio.to_thread.run_sync(func, *args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/anyio/to_thread.py:56: in run_sync
    return await get_async_backend().run_sync_in_worker_thread(
.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py:2470: in run_sync_in_worker_thread
    return await future
           ^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py:967: in run
    result = context.run(func, *args)
             ^^^^^^^^^^^^^^^^^^^^^^^^
app/routes/products.py:191: in get_product_by_slug
    product = db.query(Product).filter(Product.slug == slug).first()
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/query.py:2748: in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/query.py:2847: in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2308: in execute
    return self._execute_internal(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2190: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/context.py:293: in orm_execute_statement
    result = conn.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:516: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1639: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1848: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1988: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2343: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1969: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x1063bd850&gt;
cursor = &lt;sqlite3.Cursor object at 0x10d060ec0&gt;
statement = 'SELECT products.name AS products_name, products.description AS products_description, products.short_description AS pr...at AS products_updated_at, products.slug AS products_slug \nFROM products \nWHERE products.slug = ?\n LIMIT ? OFFSET ?'
parameters = ('nonexistent', 1, 0)
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x10a367140&gt;

    def do_execute(self, cursor, statement, parameters, context=None):
&gt;       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: products
E       [SQL: SELECT products.name AS products_name, products.description AS products_description, products.short_description AS products_short_description, products.price AS products_price, products.sale_price AS products_sale_price, products.stock_quantity AS products_stock_quantity, products.sku AS products_sku, products.featured_image AS products_featured_image, products.gallery_images AS products_gallery_images, products.is_active AS products_is_active, products.is_featured AS products_is_featured, products.meta_title AS products_meta_title, products.meta_description AS products_meta_description, products.meta_keywords AS products_meta_keywords, products.view_count AS products_view_count, products.id AS products_id, products.created_at AS products_created_at, products.updated_at AS products_updated_at, products.slug AS products_slug 
E       FROM products 
E       WHERE products.slug = ?
E        LIMIT ? OFFSET ?]
E       [parameters: ('nonexistent', 1, 0)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:922: OperationalError</failure></testcase><testcase classname="tests.test_api_products.TestProductsAPI" name="test_create_product_success" time="0.015"><failure message="sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users&#10;[SQL: SELECT users.email AS users_email, users.username AS users_username, users.full_name AS users_full_name, users.hashed_password AS users_hashed_password, users.phone AS users_phone, users.address AS users_address, users.is_active AS users_is_active, users.is_admin AS users_is_admin, users.is_verified AS users_is_verified, users.role AS users_role, users.id AS users_id, users.created_at AS users_created_at, users.updated_at AS users_updated_at &#10;FROM users &#10;WHERE users.username = ?&#10; LIMIT ? OFFSET ?]&#10;[parameters: ('admin', 1, 0)]&#10;(Background on this error at: https://sqlalche.me/e/20/e3q8)">self = &lt;sqlalchemy.engine.base.Connection object at 0x1095df740&gt;
dialect = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x1063bd850&gt;
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x1095de960&gt;
statement = &lt;sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x10959c8f0&gt;
parameters = [('admin', 1, 0)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -&gt; CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
&gt;                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1969: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x1063bd850&gt;
cursor = &lt;sqlite3.Cursor object at 0x10a472840&gt;
statement = 'SELECT users.email AS users_email, users.username AS users_username, users.full_name AS users_full_name, users.hashed...t AS users_created_at, users.updated_at AS users_updated_at \nFROM users \nWHERE users.username = ?\n LIMIT ? OFFSET ?'
parameters = ('admin', 1, 0)
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x1095de960&gt;

    def do_execute(self, cursor, statement, parameters, context=None):
&gt;       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: users

.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:922: OperationalError

The above exception was the direct cause of the following exception:

self = &lt;test_api_products.TestProductsAPI object at 0x10926af60&gt;
client = &lt;starlette.testclient.TestClient object at 0x1095c0b60&gt;
admin_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTc1MjEyMDA4NH0.POOPL9JbCLci9wUQg4topKwSPmX3TEsqLmz4W3iQYFY'}

    def test_create_product_success(self, client: TestClient, admin_headers):
        """測試創建商品成功"""
        product_data = {
            "name": "新商品",
            "description": "新商品描述",
            "price": 200.0,
            "stock": 100,
            "slug": "new-product",
            "is_active": True
        }
    
&gt;       response = client.post("/api/products/", json=product_data, headers=admin_headers)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_api_products.py:110: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/starlette/testclient.py:593: in post
    return super().post(
.venv/lib/python3.12/site-packages/httpx/_client.py:1132: in post
    return self.request(
.venv/lib/python3.12/site-packages/starlette/testclient.py:484: in request
    return super().request(
.venv/lib/python3.12/site-packages/httpx/_client.py:814: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/httpx/_client.py:901: in send
    response = self._send_handling_auth(
.venv/lib/python3.12/site-packages/httpx/_client.py:929: in _send_handling_auth
    response = self._send_handling_redirects(
.venv/lib/python3.12/site-packages/httpx/_client.py:966: in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/httpx/_client.py:1002: in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/starlette/testclient.py:377: in handle_request
    raise exc
.venv/lib/python3.12/site-packages/starlette/testclient.py:374: in handle_request
    portal.call(self.app, scope, receive, send)
.venv/lib/python3.12/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.12/3.12.10/Frameworks/Python.framework/Versions/3.12/lib/python3.12/concurrent/futures/_base.py:456: in result
    return self.__get_result()
           ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.12/3.12.10/Frameworks/Python.framework/Versions/3.12/lib/python3.12/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
.venv/lib/python3.12/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
             ^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/applications.py:113: in __call__
    await self.middleware_stack(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:187: in __call__
    raise exc
.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:165: in __call__
    await self.app(scope, receive, _send)
.venv/lib/python3.12/site-packages/starlette/middleware/cors.py:85: in __call__
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/sessions.py:85: in __call__
    await self.app(scope, receive, send_wrapper)
app/utils/logger.py:149: in __call__
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/exceptions.py:62: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    raise exc
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:42: in wrapped_app
    await app(scope, receive, sender)
.venv/lib/python3.12/site-packages/starlette/routing.py:715: in __call__
    await self.middleware_stack(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:735: in app
    await route.handle(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:288: in handle
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:76: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    raise exc
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:42: in wrapped_app
    await app(scope, receive, sender)
.venv/lib/python3.12/site-packages/starlette/routing.py:73: in app
    response = await f(request)
               ^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/fastapi/routing.py:291: in app
    solved_result = await solve_dependencies(
.venv/lib/python3.12/site-packages/fastapi/dependencies/utils.py:615: in solve_dependencies
    solved_result = await solve_dependencies(
.venv/lib/python3.12/site-packages/fastapi/dependencies/utils.py:615: in solve_dependencies
    solved_result = await solve_dependencies(
.venv/lib/python3.12/site-packages/fastapi/dependencies/utils.py:640: in solve_dependencies
    solved = await run_in_threadpool(call, **solved_result.values)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/starlette/concurrency.py:39: in run_in_threadpool
    return await anyio.to_thread.run_sync(func, *args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/anyio/to_thread.py:56: in run_sync
    return await get_async_backend().run_sync_in_worker_thread(
.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py:2470: in run_sync_in_worker_thread
    return await future
           ^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py:967: in run
    result = context.run(func, *args)
             ^^^^^^^^^^^^^^^^^^^^^^^^
app/auth.py:66: in get_current_user
    user = db.query(User).filter(User.username == token_data.username).first()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/query.py:2748: in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/query.py:2847: in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2308: in execute
    return self._execute_internal(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2190: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/context.py:293: in orm_execute_statement
    result = conn.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:516: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1639: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1848: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1988: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2343: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1969: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x1063bd850&gt;
cursor = &lt;sqlite3.Cursor object at 0x10a472840&gt;
statement = 'SELECT users.email AS users_email, users.username AS users_username, users.full_name AS users_full_name, users.hashed...t AS users_created_at, users.updated_at AS users_updated_at \nFROM users \nWHERE users.username = ?\n LIMIT ? OFFSET ?'
parameters = ('admin', 1, 0)
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x1095de960&gt;

    def do_execute(self, cursor, statement, parameters, context=None):
&gt;       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users
E       [SQL: SELECT users.email AS users_email, users.username AS users_username, users.full_name AS users_full_name, users.hashed_password AS users_hashed_password, users.phone AS users_phone, users.address AS users_address, users.is_active AS users_is_active, users.is_admin AS users_is_admin, users.is_verified AS users_is_verified, users.role AS users_role, users.id AS users_id, users.created_at AS users_created_at, users.updated_at AS users_updated_at 
E       FROM users 
E       WHERE users.username = ?
E        LIMIT ? OFFSET ?]
E       [parameters: ('admin', 1, 0)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:922: OperationalError</failure></testcase><testcase classname="tests.test_api_products.TestProductsAPI" name="test_create_product_invalid_data" time="0.014"><failure message="sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users&#10;[SQL: SELECT users.email AS users_email, users.username AS users_username, users.full_name AS users_full_name, users.hashed_password AS users_hashed_password, users.phone AS users_phone, users.address AS users_address, users.is_active AS users_is_active, users.is_admin AS users_is_admin, users.is_verified AS users_is_verified, users.role AS users_role, users.id AS users_id, users.created_at AS users_created_at, users.updated_at AS users_updated_at &#10;FROM users &#10;WHERE users.username = ?&#10; LIMIT ? OFFSET ?]&#10;[parameters: ('admin', 1, 0)]&#10;(Background on this error at: https://sqlalche.me/e/20/e3q8)">self = &lt;sqlalchemy.engine.base.Connection object at 0x10a50ad50&gt;
dialect = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x1063bd850&gt;
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x10a50a690&gt;
statement = &lt;sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x10959c8f0&gt;
parameters = [('admin', 1, 0)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -&gt; CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
&gt;                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1969: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x1063bd850&gt;
cursor = &lt;sqlite3.Cursor object at 0x10cb261c0&gt;
statement = 'SELECT users.email AS users_email, users.username AS users_username, users.full_name AS users_full_name, users.hashed...t AS users_created_at, users.updated_at AS users_updated_at \nFROM users \nWHERE users.username = ?\n LIMIT ? OFFSET ?'
parameters = ('admin', 1, 0)
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x10a50a690&gt;

    def do_execute(self, cursor, statement, parameters, context=None):
&gt;       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: users

.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:922: OperationalError

The above exception was the direct cause of the following exception:

self = &lt;test_api_products.TestProductsAPI object at 0x10926aa20&gt;
client = &lt;starlette.testclient.TestClient object at 0x10a5fc110&gt;
admin_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTc1MjEyMDA4NX0.4bwdKXyGZtdCsoO4BuXA_KXfguDGFjST0FeD4oI7Uzg'}

    def test_create_product_invalid_data(self, client: TestClient, admin_headers):
        """測試創建商品無效數據"""
        product_data = {
            "name": "",  # 空名稱
            "description": "商品描述",
            "price": -10.0,  # 負價格
            "stock": 100
        }
    
&gt;       response = client.post("/api/products/", json=product_data, headers=admin_headers)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_api_products.py:129: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/starlette/testclient.py:593: in post
    return super().post(
.venv/lib/python3.12/site-packages/httpx/_client.py:1132: in post
    return self.request(
.venv/lib/python3.12/site-packages/starlette/testclient.py:484: in request
    return super().request(
.venv/lib/python3.12/site-packages/httpx/_client.py:814: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/httpx/_client.py:901: in send
    response = self._send_handling_auth(
.venv/lib/python3.12/site-packages/httpx/_client.py:929: in _send_handling_auth
    response = self._send_handling_redirects(
.venv/lib/python3.12/site-packages/httpx/_client.py:966: in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/httpx/_client.py:1002: in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/starlette/testclient.py:377: in handle_request
    raise exc
.venv/lib/python3.12/site-packages/starlette/testclient.py:374: in handle_request
    portal.call(self.app, scope, receive, send)
.venv/lib/python3.12/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.12/3.12.10/Frameworks/Python.framework/Versions/3.12/lib/python3.12/concurrent/futures/_base.py:456: in result
    return self.__get_result()
           ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.12/3.12.10/Frameworks/Python.framework/Versions/3.12/lib/python3.12/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
.venv/lib/python3.12/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
             ^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/applications.py:113: in __call__
    await self.middleware_stack(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:187: in __call__
    raise exc
.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:165: in __call__
    await self.app(scope, receive, _send)
.venv/lib/python3.12/site-packages/starlette/middleware/cors.py:85: in __call__
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/sessions.py:85: in __call__
    await self.app(scope, receive, send_wrapper)
app/utils/logger.py:149: in __call__
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/exceptions.py:62: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    raise exc
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:42: in wrapped_app
    await app(scope, receive, sender)
.venv/lib/python3.12/site-packages/starlette/routing.py:715: in __call__
    await self.middleware_stack(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:735: in app
    await route.handle(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:288: in handle
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:76: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    raise exc
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:42: in wrapped_app
    await app(scope, receive, sender)
.venv/lib/python3.12/site-packages/starlette/routing.py:73: in app
    response = await f(request)
               ^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/fastapi/routing.py:291: in app
    solved_result = await solve_dependencies(
.venv/lib/python3.12/site-packages/fastapi/dependencies/utils.py:615: in solve_dependencies
    solved_result = await solve_dependencies(
.venv/lib/python3.12/site-packages/fastapi/dependencies/utils.py:615: in solve_dependencies
    solved_result = await solve_dependencies(
.venv/lib/python3.12/site-packages/fastapi/dependencies/utils.py:640: in solve_dependencies
    solved = await run_in_threadpool(call, **solved_result.values)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/starlette/concurrency.py:39: in run_in_threadpool
    return await anyio.to_thread.run_sync(func, *args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/anyio/to_thread.py:56: in run_sync
    return await get_async_backend().run_sync_in_worker_thread(
.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py:2470: in run_sync_in_worker_thread
    return await future
           ^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py:967: in run
    result = context.run(func, *args)
             ^^^^^^^^^^^^^^^^^^^^^^^^
app/auth.py:66: in get_current_user
    user = db.query(User).filter(User.username == token_data.username).first()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/query.py:2748: in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/query.py:2847: in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2308: in execute
    return self._execute_internal(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2190: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/context.py:293: in orm_execute_statement
    result = conn.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:516: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1639: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1848: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1988: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2343: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1969: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x1063bd850&gt;
cursor = &lt;sqlite3.Cursor object at 0x10cb261c0&gt;
statement = 'SELECT users.email AS users_email, users.username AS users_username, users.full_name AS users_full_name, users.hashed...t AS users_created_at, users.updated_at AS users_updated_at \nFROM users \nWHERE users.username = ?\n LIMIT ? OFFSET ?'
parameters = ('admin', 1, 0)
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x10a50a690&gt;

    def do_execute(self, cursor, statement, parameters, context=None):
&gt;       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users
E       [SQL: SELECT users.email AS users_email, users.username AS users_username, users.full_name AS users_full_name, users.hashed_password AS users_hashed_password, users.phone AS users_phone, users.address AS users_address, users.is_active AS users_is_active, users.is_admin AS users_is_admin, users.is_verified AS users_is_verified, users.role AS users_role, users.id AS users_id, users.created_at AS users_created_at, users.updated_at AS users_updated_at 
E       FROM users 
E       WHERE users.username = ?
E        LIMIT ? OFFSET ?]
E       [parameters: ('admin', 1, 0)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:922: OperationalError</failure></testcase><testcase classname="tests.test_api_products.TestProductsAPI" name="test_create_product_duplicate_slug" time="0.012"><error message="failed on setup with &quot;TypeError: 'stock' is an invalid keyword argument for Product&quot;">db = &lt;sqlalchemy.orm.session.Session object at 0x10957bf50&gt;

    @pytest.fixture
    def test_product(db):
        """創建測試商品"""
&gt;       product = Product(
            name="測試商品",
            description="這是一個測試商品",
            price=100.0,
            stock=50,
            is_active=True,
            slug="test-product"
        )

tests/conftest.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:564: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Product 測試商品&gt;
kwargs = {'description': '這是一個測試商品', 'is_active': True, 'name': '測試商品', 'price': 100.0, ...}
cls_ = &lt;class 'app.models.product.Product'&gt;, k = 'stock'

    def _declarative_constructor(self: Any, **kwargs: Any) -&gt; None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
&gt;               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'stock' is an invalid keyword argument for Product

.venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2142: TypeError</error></testcase><testcase classname="tests.test_api_products.TestProductsAPI" name="test_create_product_no_auth" time="0.012"><failure message="assert 403 == 401&#10; +  where 403 = &lt;Response [403 Forbidden]&gt;.status_code">self = &lt;test_api_products.TestProductsAPI object at 0x10926a4e0&gt;
client = &lt;starlette.testclient.TestClient object at 0x10a5083e0&gt;

    def test_create_product_no_auth(self, client: TestClient):
        """測試創建商品無認證"""
        product_data = {
            "name": "新商品",
            "description": "新商品描述",
            "price": 200.0,
            "stock": 100,
            "slug": "new-product"
        }
    
        response = client.post("/api/products/", json=product_data)
    
&gt;       assert response.status_code == 401
E       assert 403 == 401
E        +  where 403 = &lt;Response [403 Forbidden]&gt;.status_code

tests/test_api_products.py:163: AssertionError</failure></testcase><testcase classname="tests.test_api_products.TestProductsAPI" name="test_create_product_regular_user" time="0.014"><failure message="sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users&#10;[SQL: SELECT users.email AS users_email, users.username AS users_username, users.full_name AS users_full_name, users.hashed_password AS users_hashed_password, users.phone AS users_phone, users.address AS users_address, users.is_active AS users_is_active, users.is_admin AS users_is_admin, users.is_verified AS users_is_verified, users.role AS users_role, users.id AS users_id, users.created_at AS users_created_at, users.updated_at AS users_updated_at &#10;FROM users &#10;WHERE users.username = ?&#10; LIMIT ? OFFSET ?]&#10;[parameters: ('testuser', 1, 0)]&#10;(Background on this error at: https://sqlalche.me/e/20/e3q8)">self = &lt;sqlalchemy.engine.base.Connection object at 0x10a5a2cc0&gt;
dialect = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x1063bd850&gt;
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x10a5fd9d0&gt;
statement = &lt;sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x10959c8f0&gt;
parameters = [('testuser', 1, 0)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -&gt; CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
&gt;                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1969: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x1063bd850&gt;
cursor = &lt;sqlite3.Cursor object at 0x10b08f740&gt;
statement = 'SELECT users.email AS users_email, users.username AS users_username, users.full_name AS users_full_name, users.hashed...t AS users_created_at, users.updated_at AS users_updated_at \nFROM users \nWHERE users.username = ?\n LIMIT ? OFFSET ?'
parameters = ('testuser', 1, 0)
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x10a5fd9d0&gt;

    def do_execute(self, cursor, statement, parameters, context=None):
&gt;       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: users

.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:922: OperationalError

The above exception was the direct cause of the following exception:

self = &lt;test_api_products.TestProductsAPI object at 0x10926a210&gt;
client = &lt;starlette.testclient.TestClient object at 0x1090fbf50&gt;
auth_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0ZXN0dXNlciIsImV4cCI6MTc1MjEyMDA4NX0.KiYkAmkoGsND7Jebe3He8yIs6Y-NmvTRSObDPoAFFP8'}

    def test_create_product_regular_user(self, client: TestClient, auth_headers):
        """測試創建商品普通用戶"""
        product_data = {
            "name": "新商品",
            "description": "新商品描述",
            "price": 200.0,
            "stock": 100,
            "slug": "new-product"
        }
    
&gt;       response = client.post("/api/products/", json=product_data, headers=auth_headers)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_api_products.py:177: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/starlette/testclient.py:593: in post
    return super().post(
.venv/lib/python3.12/site-packages/httpx/_client.py:1132: in post
    return self.request(
.venv/lib/python3.12/site-packages/starlette/testclient.py:484: in request
    return super().request(
.venv/lib/python3.12/site-packages/httpx/_client.py:814: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/httpx/_client.py:901: in send
    response = self._send_handling_auth(
.venv/lib/python3.12/site-packages/httpx/_client.py:929: in _send_handling_auth
    response = self._send_handling_redirects(
.venv/lib/python3.12/site-packages/httpx/_client.py:966: in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/httpx/_client.py:1002: in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/starlette/testclient.py:377: in handle_request
    raise exc
.venv/lib/python3.12/site-packages/starlette/testclient.py:374: in handle_request
    portal.call(self.app, scope, receive, send)
.venv/lib/python3.12/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.12/3.12.10/Frameworks/Python.framework/Versions/3.12/lib/python3.12/concurrent/futures/_base.py:456: in result
    return self.__get_result()
           ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.12/3.12.10/Frameworks/Python.framework/Versions/3.12/lib/python3.12/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
.venv/lib/python3.12/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
             ^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/applications.py:113: in __call__
    await self.middleware_stack(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:187: in __call__
    raise exc
.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:165: in __call__
    await self.app(scope, receive, _send)
.venv/lib/python3.12/site-packages/starlette/middleware/cors.py:85: in __call__
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/sessions.py:85: in __call__
    await self.app(scope, receive, send_wrapper)
app/utils/logger.py:149: in __call__
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/exceptions.py:62: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    raise exc
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:42: in wrapped_app
    await app(scope, receive, sender)
.venv/lib/python3.12/site-packages/starlette/routing.py:715: in __call__
    await self.middleware_stack(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:735: in app
    await route.handle(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:288: in handle
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:76: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    raise exc
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:42: in wrapped_app
    await app(scope, receive, sender)
.venv/lib/python3.12/site-packages/starlette/routing.py:73: in app
    response = await f(request)
               ^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/fastapi/routing.py:291: in app
    solved_result = await solve_dependencies(
.venv/lib/python3.12/site-packages/fastapi/dependencies/utils.py:615: in solve_dependencies
    solved_result = await solve_dependencies(
.venv/lib/python3.12/site-packages/fastapi/dependencies/utils.py:615: in solve_dependencies
    solved_result = await solve_dependencies(
.venv/lib/python3.12/site-packages/fastapi/dependencies/utils.py:640: in solve_dependencies
    solved = await run_in_threadpool(call, **solved_result.values)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/starlette/concurrency.py:39: in run_in_threadpool
    return await anyio.to_thread.run_sync(func, *args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/anyio/to_thread.py:56: in run_sync
    return await get_async_backend().run_sync_in_worker_thread(
.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py:2470: in run_sync_in_worker_thread
    return await future
           ^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py:967: in run
    result = context.run(func, *args)
             ^^^^^^^^^^^^^^^^^^^^^^^^
app/auth.py:66: in get_current_user
    user = db.query(User).filter(User.username == token_data.username).first()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/query.py:2748: in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/query.py:2847: in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2308: in execute
    return self._execute_internal(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2190: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/context.py:293: in orm_execute_statement
    result = conn.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:516: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1639: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1848: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1988: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2343: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1969: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x1063bd850&gt;
cursor = &lt;sqlite3.Cursor object at 0x10b08f740&gt;
statement = 'SELECT users.email AS users_email, users.username AS users_username, users.full_name AS users_full_name, users.hashed...t AS users_created_at, users.updated_at AS users_updated_at \nFROM users \nWHERE users.username = ?\n LIMIT ? OFFSET ?'
parameters = ('testuser', 1, 0)
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x10a5fd9d0&gt;

    def do_execute(self, cursor, statement, parameters, context=None):
&gt;       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users
E       [SQL: SELECT users.email AS users_email, users.username AS users_username, users.full_name AS users_full_name, users.hashed_password AS users_hashed_password, users.phone AS users_phone, users.address AS users_address, users.is_active AS users_is_active, users.is_admin AS users_is_admin, users.is_verified AS users_is_verified, users.role AS users_role, users.id AS users_id, users.created_at AS users_created_at, users.updated_at AS users_updated_at 
E       FROM users 
E       WHERE users.username = ?
E        LIMIT ? OFFSET ?]
E       [parameters: ('testuser', 1, 0)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:922: OperationalError</failure></testcase><testcase classname="tests.test_api_products.TestProductsAPI" name="test_update_product_success" time="0.012"><error message="failed on setup with &quot;TypeError: 'stock' is an invalid keyword argument for Product&quot;">db = &lt;sqlalchemy.orm.session.Session object at 0x10a5a3d40&gt;

    @pytest.fixture
    def test_product(db):
        """創建測試商品"""
&gt;       product = Product(
            name="測試商品",
            description="這是一個測試商品",
            price=100.0,
            stock=50,
            is_active=True,
            slug="test-product"
        )

tests/conftest.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:564: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Product 測試商品&gt;
kwargs = {'description': '這是一個測試商品', 'is_active': True, 'name': '測試商品', 'price': 100.0, ...}
cls_ = &lt;class 'app.models.product.Product'&gt;, k = 'stock'

    def _declarative_constructor(self: Any, **kwargs: Any) -&gt; None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
&gt;               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'stock' is an invalid keyword argument for Product

.venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2142: TypeError</error></testcase><testcase classname="tests.test_api_products.TestProductsAPI" name="test_update_product_not_found" time="0.014"><failure message="sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users&#10;[SQL: SELECT users.email AS users_email, users.username AS users_username, users.full_name AS users_full_name, users.hashed_password AS users_hashed_password, users.phone AS users_phone, users.address AS users_address, users.is_active AS users_is_active, users.is_admin AS users_is_admin, users.is_verified AS users_is_verified, users.role AS users_role, users.id AS users_id, users.created_at AS users_created_at, users.updated_at AS users_updated_at &#10;FROM users &#10;WHERE users.username = ?&#10; LIMIT ? OFFSET ?]&#10;[parameters: ('admin', 1, 0)]&#10;(Background on this error at: https://sqlalche.me/e/20/e3q8)">self = &lt;sqlalchemy.engine.base.Connection object at 0x109419d00&gt;
dialect = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x1063bd850&gt;
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x109419850&gt;
statement = &lt;sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x10959c8f0&gt;
parameters = [('admin', 1, 0)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -&gt; CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
&gt;                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1969: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x1063bd850&gt;
cursor = &lt;sqlite3.Cursor object at 0x10cb268c0&gt;
statement = 'SELECT users.email AS users_email, users.username AS users_username, users.full_name AS users_full_name, users.hashed...t AS users_created_at, users.updated_at AS users_updated_at \nFROM users \nWHERE users.username = ?\n LIMIT ? OFFSET ?'
parameters = ('admin', 1, 0)
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x109419850&gt;

    def do_execute(self, cursor, statement, parameters, context=None):
&gt;       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: users

.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:922: OperationalError

The above exception was the direct cause of the following exception:

self = &lt;test_api_products.TestProductsAPI object at 0x109269ee0&gt;
client = &lt;starlette.testclient.TestClient object at 0x10a582ea0&gt;
admin_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTc1MjEyMDA4NX0.4bwdKXyGZtdCsoO4BuXA_KXfguDGFjST0FeD4oI7Uzg'}

    def test_update_product_not_found(self, client: TestClient, admin_headers):
        """測試更新不存在的商品"""
        update_data = {
            "name": "更新後的商品",
            "price": 150.0
        }
    
&gt;       response = client.put("/api/products/999", json=update_data, headers=admin_headers)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_api_products.py:208: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/starlette/testclient.py:626: in put
    return super().put(
.venv/lib/python3.12/site-packages/httpx/_client.py:1169: in put
    return self.request(
.venv/lib/python3.12/site-packages/starlette/testclient.py:484: in request
    return super().request(
.venv/lib/python3.12/site-packages/httpx/_client.py:814: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/httpx/_client.py:901: in send
    response = self._send_handling_auth(
.venv/lib/python3.12/site-packages/httpx/_client.py:929: in _send_handling_auth
    response = self._send_handling_redirects(
.venv/lib/python3.12/site-packages/httpx/_client.py:966: in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/httpx/_client.py:1002: in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/starlette/testclient.py:377: in handle_request
    raise exc
.venv/lib/python3.12/site-packages/starlette/testclient.py:374: in handle_request
    portal.call(self.app, scope, receive, send)
.venv/lib/python3.12/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.12/3.12.10/Frameworks/Python.framework/Versions/3.12/lib/python3.12/concurrent/futures/_base.py:456: in result
    return self.__get_result()
           ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.12/3.12.10/Frameworks/Python.framework/Versions/3.12/lib/python3.12/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
.venv/lib/python3.12/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
             ^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/applications.py:113: in __call__
    await self.middleware_stack(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:187: in __call__
    raise exc
.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:165: in __call__
    await self.app(scope, receive, _send)
.venv/lib/python3.12/site-packages/starlette/middleware/cors.py:85: in __call__
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/sessions.py:85: in __call__
    await self.app(scope, receive, send_wrapper)
app/utils/logger.py:149: in __call__
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/exceptions.py:62: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    raise exc
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:42: in wrapped_app
    await app(scope, receive, sender)
.venv/lib/python3.12/site-packages/starlette/routing.py:715: in __call__
    await self.middleware_stack(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:735: in app
    await route.handle(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:288: in handle
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:76: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    raise exc
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:42: in wrapped_app
    await app(scope, receive, sender)
.venv/lib/python3.12/site-packages/starlette/routing.py:73: in app
    response = await f(request)
               ^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/fastapi/routing.py:291: in app
    solved_result = await solve_dependencies(
.venv/lib/python3.12/site-packages/fastapi/dependencies/utils.py:615: in solve_dependencies
    solved_result = await solve_dependencies(
.venv/lib/python3.12/site-packages/fastapi/dependencies/utils.py:615: in solve_dependencies
    solved_result = await solve_dependencies(
.venv/lib/python3.12/site-packages/fastapi/dependencies/utils.py:640: in solve_dependencies
    solved = await run_in_threadpool(call, **solved_result.values)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/starlette/concurrency.py:39: in run_in_threadpool
    return await anyio.to_thread.run_sync(func, *args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/anyio/to_thread.py:56: in run_sync
    return await get_async_backend().run_sync_in_worker_thread(
.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py:2470: in run_sync_in_worker_thread
    return await future
           ^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py:967: in run
    result = context.run(func, *args)
             ^^^^^^^^^^^^^^^^^^^^^^^^
app/auth.py:66: in get_current_user
    user = db.query(User).filter(User.username == token_data.username).first()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/query.py:2748: in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/query.py:2847: in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2308: in execute
    return self._execute_internal(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2190: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/context.py:293: in orm_execute_statement
    result = conn.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:516: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1639: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1848: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1988: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2343: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1969: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x1063bd850&gt;
cursor = &lt;sqlite3.Cursor object at 0x10cb268c0&gt;
statement = 'SELECT users.email AS users_email, users.username AS users_username, users.full_name AS users_full_name, users.hashed...t AS users_created_at, users.updated_at AS users_updated_at \nFROM users \nWHERE users.username = ?\n LIMIT ? OFFSET ?'
parameters = ('admin', 1, 0)
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x109419850&gt;

    def do_execute(self, cursor, statement, parameters, context=None):
&gt;       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users
E       [SQL: SELECT users.email AS users_email, users.username AS users_username, users.full_name AS users_full_name, users.hashed_password AS users_hashed_password, users.phone AS users_phone, users.address AS users_address, users.is_active AS users_is_active, users.is_admin AS users_is_admin, users.is_verified AS users_is_verified, users.role AS users_role, users.id AS users_id, users.created_at AS users_created_at, users.updated_at AS users_updated_at 
E       FROM users 
E       WHERE users.username = ?
E        LIMIT ? OFFSET ?]
E       [parameters: ('admin', 1, 0)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:922: OperationalError</failure></testcase><testcase classname="tests.test_api_products.TestProductsAPI" name="test_update_product_no_auth" time="0.011"><error message="failed on setup with &quot;TypeError: 'stock' is an invalid keyword argument for Product&quot;">db = &lt;sqlalchemy.orm.session.Session object at 0x10959f4a0&gt;

    @pytest.fixture
    def test_product(db):
        """創建測試商品"""
&gt;       product = Product(
            name="測試商品",
            description="這是一個測試商品",
            price=100.0,
            stock=50,
            is_active=True,
            slug="test-product"
        )

tests/conftest.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:564: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Product 測試商品&gt;
kwargs = {'description': '這是一個測試商品', 'is_active': True, 'name': '測試商品', 'price': 100.0, ...}
cls_ = &lt;class 'app.models.product.Product'&gt;, k = 'stock'

    def _declarative_constructor(self: Any, **kwargs: Any) -&gt; None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
&gt;               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'stock' is an invalid keyword argument for Product

.venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2142: TypeError</error></testcase><testcase classname="tests.test_api_products.TestProductsAPI" name="test_delete_product_success" time="0.012"><error message="failed on setup with &quot;TypeError: 'stock' is an invalid keyword argument for Product&quot;">db = &lt;sqlalchemy.orm.session.Session object at 0x10a502e10&gt;

    @pytest.fixture
    def test_product(db):
        """創建測試商品"""
&gt;       product = Product(
            name="測試商品",
            description="這是一個測試商品",
            price=100.0,
            stock=50,
            is_active=True,
            slug="test-product"
        )

tests/conftest.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:564: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Product 測試商品&gt;
kwargs = {'description': '這是一個測試商品', 'is_active': True, 'name': '測試商品', 'price': 100.0, ...}
cls_ = &lt;class 'app.models.product.Product'&gt;, k = 'stock'

    def _declarative_constructor(self: Any, **kwargs: Any) -&gt; None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
&gt;               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'stock' is an invalid keyword argument for Product

.venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2142: TypeError</error></testcase><testcase classname="tests.test_api_products.TestProductsAPI" name="test_delete_product_not_found" time="0.014"><failure message="sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users&#10;[SQL: SELECT users.email AS users_email, users.username AS users_username, users.full_name AS users_full_name, users.hashed_password AS users_hashed_password, users.phone AS users_phone, users.address AS users_address, users.is_active AS users_is_active, users.is_admin AS users_is_admin, users.is_verified AS users_is_verified, users.role AS users_role, users.id AS users_id, users.created_at AS users_created_at, users.updated_at AS users_updated_at &#10;FROM users &#10;WHERE users.username = ?&#10; LIMIT ? OFFSET ?]&#10;[parameters: ('admin', 1, 0)]&#10;(Background on this error at: https://sqlalche.me/e/20/e3q8)">self = &lt;sqlalchemy.engine.base.Connection object at 0x10a5fe720&gt;
dialect = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x1063bd850&gt;
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x10a580710&gt;
statement = &lt;sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x10959c8f0&gt;
parameters = [('admin', 1, 0)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -&gt; CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
&gt;                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1969: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x1063bd850&gt;
cursor = &lt;sqlite3.Cursor object at 0x10b3507c0&gt;
statement = 'SELECT users.email AS users_email, users.username AS users_username, users.full_name AS users_full_name, users.hashed...t AS users_created_at, users.updated_at AS users_updated_at \nFROM users \nWHERE users.username = ?\n LIMIT ? OFFSET ?'
parameters = ('admin', 1, 0)
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x10a580710&gt;

    def do_execute(self, cursor, statement, parameters, context=None):
&gt;       cursor.execute(statement, parameters)
E       sqlite3.OperationalError: no such table: users

.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:922: OperationalError

The above exception was the direct cause of the following exception:

self = &lt;test_api_products.TestProductsAPI object at 0x10926bef0&gt;
client = &lt;starlette.testclient.TestClient object at 0x10959d6a0&gt;
admin_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTc1MjEyMDA4Nn0.0sEx_VMvt-v_rIa29q0KeEzSSvmtm8nNSLK1ntYKZBI'}

    def test_delete_product_not_found(self, client: TestClient, admin_headers):
        """測試刪除不存在的商品"""
&gt;       response = client.delete("/api/products/999", headers=admin_headers)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_api_products.py:237: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/starlette/testclient.py:688: in delete
    return super().delete(
.venv/lib/python3.12/site-packages/httpx/_client.py:1239: in delete
    return self.request(
.venv/lib/python3.12/site-packages/starlette/testclient.py:484: in request
    return super().request(
.venv/lib/python3.12/site-packages/httpx/_client.py:814: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/httpx/_client.py:901: in send
    response = self._send_handling_auth(
.venv/lib/python3.12/site-packages/httpx/_client.py:929: in _send_handling_auth
    response = self._send_handling_redirects(
.venv/lib/python3.12/site-packages/httpx/_client.py:966: in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/httpx/_client.py:1002: in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/starlette/testclient.py:377: in handle_request
    raise exc
.venv/lib/python3.12/site-packages/starlette/testclient.py:374: in handle_request
    portal.call(self.app, scope, receive, send)
.venv/lib/python3.12/site-packages/anyio/from_thread.py:290: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.12/3.12.10/Frameworks/Python.framework/Versions/3.12/lib/python3.12/concurrent/futures/_base.py:456: in result
    return self.__get_result()
           ^^^^^^^^^^^^^^^^^^^
/opt/homebrew/Cellar/python@3.12/3.12.10/Frameworks/Python.framework/Versions/3.12/lib/python3.12/concurrent/futures/_base.py:401: in __get_result
    raise self._exception
.venv/lib/python3.12/site-packages/anyio/from_thread.py:221: in _call_func
    retval = await retval_or_awaitable
             ^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/fastapi/applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/applications.py:113: in __call__
    await self.middleware_stack(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:187: in __call__
    raise exc
.venv/lib/python3.12/site-packages/starlette/middleware/errors.py:165: in __call__
    await self.app(scope, receive, _send)
.venv/lib/python3.12/site-packages/starlette/middleware/cors.py:85: in __call__
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/sessions.py:85: in __call__
    await self.app(scope, receive, send_wrapper)
app/utils/logger.py:149: in __call__
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/middleware/exceptions.py:62: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    raise exc
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:42: in wrapped_app
    await app(scope, receive, sender)
.venv/lib/python3.12/site-packages/starlette/routing.py:715: in __call__
    await self.middleware_stack(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:735: in app
    await route.handle(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:288: in handle
    await self.app(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/routing.py:76: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:53: in wrapped_app
    raise exc
.venv/lib/python3.12/site-packages/starlette/_exception_handler.py:42: in wrapped_app
    await app(scope, receive, sender)
.venv/lib/python3.12/site-packages/starlette/routing.py:73: in app
    response = await f(request)
               ^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/fastapi/routing.py:291: in app
    solved_result = await solve_dependencies(
.venv/lib/python3.12/site-packages/fastapi/dependencies/utils.py:615: in solve_dependencies
    solved_result = await solve_dependencies(
.venv/lib/python3.12/site-packages/fastapi/dependencies/utils.py:615: in solve_dependencies
    solved_result = await solve_dependencies(
.venv/lib/python3.12/site-packages/fastapi/dependencies/utils.py:640: in solve_dependencies
    solved = await run_in_threadpool(call, **solved_result.values)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/starlette/concurrency.py:39: in run_in_threadpool
    return await anyio.to_thread.run_sync(func, *args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/anyio/to_thread.py:56: in run_sync
    return await get_async_backend().run_sync_in_worker_thread(
.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py:2470: in run_sync_in_worker_thread
    return await future
           ^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/anyio/_backends/_asyncio.py:967: in run
    result = context.run(func, *args)
             ^^^^^^^^^^^^^^^^^^^^^^^^
app/auth.py:66: in get_current_user
    user = db.query(User).filter(User.username == token_data.username).first()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/query.py:2748: in first
    return self.limit(1)._iter().first()  # type: ignore
           ^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/query.py:2847: in _iter
    result: Union[ScalarResult[_T], Result[_T]] = self.session.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2308: in execute
    return self._execute_internal(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:2190: in _execute_internal
    result: Result[Any] = compile_state_cls.orm_execute_statement(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/context.py:293: in orm_execute_statement
    result = conn.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:516: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1639: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1848: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1988: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2343: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1969: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x1063bd850&gt;
cursor = &lt;sqlite3.Cursor object at 0x10b3507c0&gt;
statement = 'SELECT users.email AS users_email, users.username AS users_username, users.full_name AS users_full_name, users.hashed...t AS users_created_at, users.updated_at AS users_updated_at \nFROM users \nWHERE users.username = ?\n LIMIT ? OFFSET ?'
parameters = ('admin', 1, 0)
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x10a580710&gt;

    def do_execute(self, cursor, statement, parameters, context=None):
&gt;       cursor.execute(statement, parameters)
E       sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: users
E       [SQL: SELECT users.email AS users_email, users.username AS users_username, users.full_name AS users_full_name, users.hashed_password AS users_hashed_password, users.phone AS users_phone, users.address AS users_address, users.is_active AS users_is_active, users.is_admin AS users_is_admin, users.is_verified AS users_is_verified, users.role AS users_role, users.id AS users_id, users.created_at AS users_created_at, users.updated_at AS users_updated_at 
E       FROM users 
E       WHERE users.username = ?
E        LIMIT ? OFFSET ?]
E       [parameters: ('admin', 1, 0)]
E       (Background on this error at: https://sqlalche.me/e/20/e3q8)

.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:922: OperationalError</failure></testcase><testcase classname="tests.test_api_products.TestProductsAPI" name="test_delete_product_no_auth" time="0.012"><error message="failed on setup with &quot;TypeError: 'stock' is an invalid keyword argument for Product&quot;">db = &lt;sqlalchemy.orm.session.Session object at 0x10a5007a0&gt;

    @pytest.fixture
    def test_product(db):
        """創建測試商品"""
&gt;       product = Product(
            name="測試商品",
            description="這是一個測試商品",
            price=100.0,
            stock=50,
            is_active=True,
            slug="test-product"
        )

tests/conftest.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:564: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Product 測試商品&gt;
kwargs = {'description': '這是一個測試商品', 'is_active': True, 'name': '測試商品', 'price': 100.0, ...}
cls_ = &lt;class 'app.models.product.Product'&gt;, k = 'stock'

    def _declarative_constructor(self: Any, **kwargs: Any) -&gt; None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
&gt;               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'stock' is an invalid keyword argument for Product

.venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2142: TypeError</error></testcase><testcase classname="tests.test_api_products.TestProductsAPI" name="test_upload_product_image_success" time="0.012"><error message="failed on setup with &quot;TypeError: 'stock' is an invalid keyword argument for Product&quot;">db = &lt;sqlalchemy.orm.session.Session object at 0x10a5ef4d0&gt;

    @pytest.fixture
    def test_product(db):
        """創建測試商品"""
&gt;       product = Product(
            name="測試商品",
            description="這是一個測試商品",
            price=100.0,
            stock=50,
            is_active=True,
            slug="test-product"
        )

tests/conftest.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:564: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Product 測試商品&gt;
kwargs = {'description': '這是一個測試商品', 'is_active': True, 'name': '測試商品', 'price': 100.0, ...}
cls_ = &lt;class 'app.models.product.Product'&gt;, k = 'stock'

    def _declarative_constructor(self: Any, **kwargs: Any) -&gt; None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
&gt;               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'stock' is an invalid keyword argument for Product

.venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2142: TypeError</error></testcase><testcase classname="tests.test_api_products.TestProductsAPI" name="test_upload_product_image_invalid_file" time="0.011"><error message="failed on setup with &quot;TypeError: 'stock' is an invalid keyword argument for Product&quot;">db = &lt;sqlalchemy.orm.session.Session object at 0x10a5ef920&gt;

    @pytest.fixture
    def test_product(db):
        """創建測試商品"""
&gt;       product = Product(
            name="測試商品",
            description="這是一個測試商品",
            price=100.0,
            stock=50,
            is_active=True,
            slug="test-product"
        )

tests/conftest.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:564: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Product 測試商品&gt;
kwargs = {'description': '這是一個測試商品', 'is_active': True, 'name': '測試商品', 'price': 100.0, ...}
cls_ = &lt;class 'app.models.product.Product'&gt;, k = 'stock'

    def _declarative_constructor(self: Any, **kwargs: Any) -&gt; None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
&gt;               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'stock' is an invalid keyword argument for Product

.venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2142: TypeError</error></testcase><testcase classname="tests.test_api_products.TestProductsAPI" name="test_upload_product_image_no_file" time="0.011"><error message="failed on setup with &quot;TypeError: 'stock' is an invalid keyword argument for Product&quot;">db = &lt;sqlalchemy.orm.session.Session object at 0x10a3ec350&gt;

    @pytest.fixture
    def test_product(db):
        """創建測試商品"""
&gt;       product = Product(
            name="測試商品",
            description="這是一個測試商品",
            price=100.0,
            stock=50,
            is_active=True,
            slug="test-product"
        )

tests/conftest.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:564: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Product 測試商品&gt;
kwargs = {'description': '這是一個測試商品', 'is_active': True, 'name': '測試商品', 'price': 100.0, ...}
cls_ = &lt;class 'app.models.product.Product'&gt;, k = 'stock'

    def _declarative_constructor(self: Any, **kwargs: Any) -&gt; None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
&gt;               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'stock' is an invalid keyword argument for Product

.venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2142: TypeError</error></testcase><testcase classname="tests.test_api_products.TestProductsAPI" name="test_get_product_recommendations" time="0.010"><error message="failed on setup with &quot;TypeError: 'stock' is an invalid keyword argument for Product&quot;">db = &lt;sqlalchemy.orm.session.Session object at 0x10a5af2c0&gt;

    @pytest.fixture
    def test_product(db):
        """創建測試商品"""
&gt;       product = Product(
            name="測試商品",
            description="這是一個測試商品",
            price=100.0,
            stock=50,
            is_active=True,
            slug="test-product"
        )

tests/conftest.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:564: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Product 測試商品&gt;
kwargs = {'description': '這是一個測試商品', 'is_active': True, 'name': '測試商品', 'price': 100.0, ...}
cls_ = &lt;class 'app.models.product.Product'&gt;, k = 'stock'

    def _declarative_constructor(self: Any, **kwargs: Any) -&gt; None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
&gt;               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'stock' is an invalid keyword argument for Product

.venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2142: TypeError</error></testcase><testcase classname="tests.test_api_products.TestProductsAPI" name="test_get_product_reviews" time="0.010"><error message="failed on setup with &quot;TypeError: 'stock' is an invalid keyword argument for Product&quot;">db = &lt;sqlalchemy.orm.session.Session object at 0x10a5af980&gt;

    @pytest.fixture
    def test_product(db):
        """創建測試商品"""
&gt;       product = Product(
            name="測試商品",
            description="這是一個測試商品",
            price=100.0,
            stock=50,
            is_active=True,
            slug="test-product"
        )

tests/conftest.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:564: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Product 測試商品&gt;
kwargs = {'description': '這是一個測試商品', 'is_active': True, 'name': '測試商品', 'price': 100.0, ...}
cls_ = &lt;class 'app.models.product.Product'&gt;, k = 'stock'

    def _declarative_constructor(self: Any, **kwargs: Any) -&gt; None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
&gt;               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'stock' is an invalid keyword argument for Product

.venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2142: TypeError</error></testcase><testcase classname="tests.test_api_products.TestProductsAPI" name="test_search_products" time="0.010"><error message="failed on setup with &quot;TypeError: 'stock' is an invalid keyword argument for Product&quot;">db = &lt;sqlalchemy.orm.session.Session object at 0x10a5ad520&gt;

    @pytest.fixture
    def test_product(db):
        """創建測試商品"""
&gt;       product = Product(
            name="測試商品",
            description="這是一個測試商品",
            price=100.0,
            stock=50,
            is_active=True,
            slug="test-product"
        )

tests/conftest.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:564: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Product 測試商品&gt;
kwargs = {'description': '這是一個測試商品', 'is_active': True, 'name': '測試商品', 'price': 100.0, ...}
cls_ = &lt;class 'app.models.product.Product'&gt;, k = 'stock'

    def _declarative_constructor(self: Any, **kwargs: Any) -&gt; None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
&gt;               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'stock' is an invalid keyword argument for Product

.venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2142: TypeError</error></testcase><testcase classname="tests.test_api_products.TestProductsAPI" name="test_get_product_stock_info" time="0.011"><error message="failed on setup with &quot;TypeError: 'stock' is an invalid keyword argument for Product&quot;">db = &lt;sqlalchemy.orm.session.Session object at 0x10a5bb110&gt;

    @pytest.fixture
    def test_product(db):
        """創建測試商品"""
&gt;       product = Product(
            name="測試商品",
            description="這是一個測試商品",
            price=100.0,
            stock=50,
            is_active=True,
            slug="test-product"
        )

tests/conftest.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:564: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Product 測試商品&gt;
kwargs = {'description': '這是一個測試商品', 'is_active': True, 'name': '測試商品', 'price': 100.0, ...}
cls_ = &lt;class 'app.models.product.Product'&gt;, k = 'stock'

    def _declarative_constructor(self: Any, **kwargs: Any) -&gt; None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
&gt;               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'stock' is an invalid keyword argument for Product

.venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2142: TypeError</error></testcase><testcase classname="tests.test_api_products.TestProductsAPI" name="test_update_product_stock_success" time="0.012"><error message="failed on setup with &quot;TypeError: 'stock' is an invalid keyword argument for Product&quot;">db = &lt;sqlalchemy.orm.session.Session object at 0x10a5ba420&gt;

    @pytest.fixture
    def test_product(db):
        """創建測試商品"""
&gt;       product = Product(
            name="測試商品",
            description="這是一個測試商品",
            price=100.0,
            stock=50,
            is_active=True,
            slug="test-product"
        )

tests/conftest.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:564: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Product 測試商品&gt;
kwargs = {'description': '這是一個測試商品', 'is_active': True, 'name': '測試商品', 'price': 100.0, ...}
cls_ = &lt;class 'app.models.product.Product'&gt;, k = 'stock'

    def _declarative_constructor(self: Any, **kwargs: Any) -&gt; None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
&gt;               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'stock' is an invalid keyword argument for Product

.venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2142: TypeError</error></testcase><testcase classname="tests.test_api_products.TestProductsAPI" name="test_update_product_stock_increase" time="0.012"><error message="failed on setup with &quot;TypeError: 'stock' is an invalid keyword argument for Product&quot;">db = &lt;sqlalchemy.orm.session.Session object at 0x10a5ba720&gt;

    @pytest.fixture
    def test_product(db):
        """創建測試商品"""
&gt;       product = Product(
            name="測試商品",
            description="這是一個測試商品",
            price=100.0,
            stock=50,
            is_active=True,
            slug="test-product"
        )

tests/conftest.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:564: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Product 測試商品&gt;
kwargs = {'description': '這是一個測試商品', 'is_active': True, 'name': '測試商品', 'price': 100.0, ...}
cls_ = &lt;class 'app.models.product.Product'&gt;, k = 'stock'

    def _declarative_constructor(self: Any, **kwargs: Any) -&gt; None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
&gt;               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'stock' is an invalid keyword argument for Product

.venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2142: TypeError</error></testcase><testcase classname="tests.test_api_products.TestProductsAPI" name="test_update_product_stock_decrease" time="0.011"><error message="failed on setup with &quot;TypeError: 'stock' is an invalid keyword argument for Product&quot;">db = &lt;sqlalchemy.orm.session.Session object at 0x10a582210&gt;

    @pytest.fixture
    def test_product(db):
        """創建測試商品"""
&gt;       product = Product(
            name="測試商品",
            description="這是一個測試商品",
            price=100.0,
            stock=50,
            is_active=True,
            slug="test-product"
        )

tests/conftest.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:564: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Product 測試商品&gt;
kwargs = {'description': '這是一個測試商品', 'is_active': True, 'name': '測試商品', 'price': 100.0, ...}
cls_ = &lt;class 'app.models.product.Product'&gt;, k = 'stock'

    def _declarative_constructor(self: Any, **kwargs: Any) -&gt; None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
&gt;               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'stock' is an invalid keyword argument for Product

.venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2142: TypeError</error></testcase><testcase classname="tests.test_api_products.TestProductsAPI" name="test_get_low_stock_products" time="0.011"><failure message="TypeError: 'stock' is an invalid keyword argument for Product">self = &lt;test_api_products.TestProductsAPI object at 0x109408350&gt;
client = &lt;starlette.testclient.TestClient object at 0x10a5824e0&gt;
admin_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTc1MjEyMDA4Nn0.0sEx_VMvt-v_rIa29q0KeEzSSvmtm8nNSLK1ntYKZBI'}
db = &lt;sqlalchemy.orm.session.Session object at 0x10a582120&gt;

    def test_get_low_stock_products(self, client: TestClient, admin_headers, db):
        """測試獲取低庫存商品"""
        # 創建一些低庫存商品
        low_stock_products = [
&gt;           Product(name="低庫存商品1", description="描述", price=100, stock=2, slug="low-stock-1"),
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
            Product(name="低庫存商品2", description="描述", price=100, stock=3, slug="low-stock-2")
        ]

tests/test_api_products.py:394: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
&lt;string&gt;:4: in __init__
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:564: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Product 低庫存商品1&gt;
kwargs = {'description': '描述', 'name': '低庫存商品1', 'price': 100, 'slug': 'low-stock-1', ...}
cls_ = &lt;class 'app.models.product.Product'&gt;, k = 'stock'

    def _declarative_constructor(self: Any, **kwargs: Any) -&gt; None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
&gt;               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'stock' is an invalid keyword argument for Product

.venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2142: TypeError</failure></testcase><testcase classname="tests.test_api_products.TestProductsAPI" name="test_get_product_sales_stats" time="0.011"><error message="failed on setup with &quot;TypeError: 'stock' is an invalid keyword argument for Product&quot;">db = &lt;sqlalchemy.orm.session.Session object at 0x10a5ba5d0&gt;

    @pytest.fixture
    def test_product(db):
        """創建測試商品"""
&gt;       product = Product(
            name="測試商品",
            description="這是一個測試商品",
            price=100.0,
            stock=50,
            is_active=True,
            slug="test-product"
        )

tests/conftest.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:564: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Product 測試商品&gt;
kwargs = {'description': '這是一個測試商品', 'is_active': True, 'name': '測試商品', 'price': 100.0, ...}
cls_ = &lt;class 'app.models.product.Product'&gt;, k = 'stock'

    def _declarative_constructor(self: Any, **kwargs: Any) -&gt; None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
&gt;               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'stock' is an invalid keyword argument for Product

.venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2142: TypeError</error></testcase><testcase classname="tests.test_api_products.TestProductsAPI" name="test_bulk_update_products" time="0.011"><failure message="TypeError: 'stock' is an invalid keyword argument for Product">self = &lt;test_api_products.TestProductsAPI object at 0x109408320&gt;
client = &lt;starlette.testclient.TestClient object at 0x10b058b00&gt;
admin_headers = {'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTc1MjEyMDA4Nn0.0sEx_VMvt-v_rIa29q0KeEzSSvmtm8nNSLK1ntYKZBI'}
db = &lt;sqlalchemy.orm.session.Session object at 0x10b0582f0&gt;

    def test_bulk_update_products(self, client: TestClient, admin_headers, db):
        """測試批量更新商品"""
        # 創建多個商品
        products = []
        for i in range(3):
&gt;           product = Product(
                name=f"批量商品{i}",
                description=f"批量商品{i}描述",
                price=100.0 + i * 10,
                stock=50,
                slug=f"bulk-product-{i}"
            )

tests/test_api_products.py:424: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
&lt;string&gt;:4: in __init__
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:564: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Product 批量商品0&gt;
kwargs = {'description': '批量商品0描述', 'name': '批量商品0', 'price': 100.0, 'slug': 'bulk-product-0', ...}
cls_ = &lt;class 'app.models.product.Product'&gt;, k = 'stock'

    def _declarative_constructor(self: Any, **kwargs: Any) -&gt; None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
&gt;               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'stock' is an invalid keyword argument for Product

.venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2142: TypeError</failure></testcase><testcase classname="tests.test_e2e.TestCompleteUserFlow" name="test_user_registration_and_login_flow" time="0.012"><failure message="assert 422 == 201&#10; +  where 422 = &lt;Response [422 Unprocessable Entity]&gt;.status_code">self = &lt;test_e2e.TestCompleteUserFlow object at 0x1092696d0&gt;
client = &lt;starlette.testclient.TestClient object at 0x10b0f0230&gt;
db = &lt;sqlalchemy.orm.session.Session object at 0x10b0f3e60&gt;

    def test_user_registration_and_login_flow(self, client: TestClient, db):
        """測試用戶註冊和登錄流程"""
        # 1. 用戶註冊
        registration_data = {
            "username": "e2e_user",
            "email": "e2e@example.com",
            "password": "password123"
        }
    
        register_response = client.post("/api/auth/register", json=registration_data)
&gt;       assert register_response.status_code == 201
E       assert 422 == 201
E        +  where 422 = &lt;Response [422 Unprocessable Entity]&gt;.status_code

tests/test_e2e.py:31: AssertionError</failure></testcase><testcase classname="tests.test_e2e.TestCompleteUserFlow" name="test_product_browsing_and_purchase_flow" time="0.011"><failure message="assert 422 == 201&#10; +  where 422 = &lt;Response [422 Unprocessable Entity]&gt;.status_code">self = &lt;test_e2e.TestCompleteUserFlow object at 0x10940b770&gt;
client = &lt;starlette.testclient.TestClient object at 0x10b0f1c40&gt;
db = &lt;sqlalchemy.orm.session.Session object at 0x10b0f3da0&gt;

    def test_product_browsing_and_purchase_flow(self, client: TestClient, db):
        """測試商品瀏覽和購買流程"""
        # 準備測試數據
&gt;       user_headers, user_data = self.test_user_registration_and_login_flow(client, db)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_e2e.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;test_e2e.TestCompleteUserFlow object at 0x10940b770&gt;
client = &lt;starlette.testclient.TestClient object at 0x10b0f1c40&gt;
db = &lt;sqlalchemy.orm.session.Session object at 0x10b0f3da0&gt;

    def test_user_registration_and_login_flow(self, client: TestClient, db):
        """測試用戶註冊和登錄流程"""
        # 1. 用戶註冊
        registration_data = {
            "username": "e2e_user",
            "email": "e2e@example.com",
            "password": "password123"
        }
    
        register_response = client.post("/api/auth/register", json=registration_data)
&gt;       assert register_response.status_code == 201
E       assert 422 == 201
E        +  where 422 = &lt;Response [422 Unprocessable Entity]&gt;.status_code

tests/test_e2e.py:31: AssertionError</failure></testcase><testcase classname="tests.test_e2e.TestCompleteUserFlow" name="test_admin_order_management_flow" time="0.011"><failure message="assert 422 == 201&#10; +  where 422 = &lt;Response [422 Unprocessable Entity]&gt;.status_code">self = &lt;test_e2e.TestCompleteUserFlow object at 0x10940b380&gt;
client = &lt;starlette.testclient.TestClient object at 0x10b074ad0&gt;
db = &lt;sqlalchemy.orm.session.Session object at 0x10b074620&gt;

    def test_admin_order_management_flow(self, client: TestClient, db):
        """測試管理員訂單管理流程"""
        # 準備測試數據
&gt;       order_id, user_headers = self.test_product_browsing_and_purchase_flow(client, db)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_e2e.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_e2e.py:60: in test_product_browsing_and_purchase_flow
    user_headers, user_data = self.test_user_registration_and_login_flow(client, db)
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;test_e2e.TestCompleteUserFlow object at 0x10940b380&gt;
client = &lt;starlette.testclient.TestClient object at 0x10b074ad0&gt;
db = &lt;sqlalchemy.orm.session.Session object at 0x10b074620&gt;

    def test_user_registration_and_login_flow(self, client: TestClient, db):
        """測試用戶註冊和登錄流程"""
        # 1. 用戶註冊
        registration_data = {
            "username": "e2e_user",
            "email": "e2e@example.com",
            "password": "password123"
        }
    
        register_response = client.post("/api/auth/register", json=registration_data)
&gt;       assert register_response.status_code == 201
E       assert 422 == 201
E        +  where 422 = &lt;Response [422 Unprocessable Entity]&gt;.status_code

tests/test_e2e.py:31: AssertionError</failure></testcase><testcase classname="tests.test_e2e.TestCompleteUserFlow" name="test_coupon_system_flow" time="0.011"><failure message="assert 422 == 201&#10; +  where 422 = &lt;Response [422 Unprocessable Entity]&gt;.status_code">self = &lt;test_e2e.TestCompleteUserFlow object at 0x10940be90&gt;
client = &lt;starlette.testclient.TestClient object at 0x10b006b70&gt;
db = &lt;sqlalchemy.orm.session.Session object at 0x10b007740&gt;

    def test_coupon_system_flow(self, client: TestClient, db):
        """測試優惠券系統流程"""
        # 準備測試數據
&gt;       user_headers, user_data = self.test_user_registration_and_login_flow(client, db)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_e2e.py:204: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;test_e2e.TestCompleteUserFlow object at 0x10940be90&gt;
client = &lt;starlette.testclient.TestClient object at 0x10b006b70&gt;
db = &lt;sqlalchemy.orm.session.Session object at 0x10b007740&gt;

    def test_user_registration_and_login_flow(self, client: TestClient, db):
        """測試用戶註冊和登錄流程"""
        # 1. 用戶註冊
        registration_data = {
            "username": "e2e_user",
            "email": "e2e@example.com",
            "password": "password123"
        }
    
        register_response = client.post("/api/auth/register", json=registration_data)
&gt;       assert register_response.status_code == 201
E       assert 422 == 201
E        +  where 422 = &lt;Response [422 Unprocessable Entity]&gt;.status_code

tests/test_e2e.py:31: AssertionError</failure></testcase><testcase classname="tests.test_e2e.TestCompleteUserFlow" name="test_product_review_flow" time="0.050"><failure message="assert 422 == 201&#10; +  where 422 = &lt;Response [422 Unprocessable Entity]&gt;.status_code">self = &lt;test_e2e.TestCompleteUserFlow object at 0x10940b1d0&gt;
client = &lt;starlette.testclient.TestClient object at 0x10b007380&gt;
db = &lt;sqlalchemy.orm.session.Session object at 0x10b0042f0&gt;

    def test_product_review_flow(self, client: TestClient, db):
        """測試商品評論流程"""
        # 準備測試數據
&gt;       order_id, user_headers = self.test_product_browsing_and_purchase_flow(client, db)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_e2e.py:306: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_e2e.py:60: in test_product_browsing_and_purchase_flow
    user_headers, user_data = self.test_user_registration_and_login_flow(client, db)
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;test_e2e.TestCompleteUserFlow object at 0x10940b1d0&gt;
client = &lt;starlette.testclient.TestClient object at 0x10b007380&gt;
db = &lt;sqlalchemy.orm.session.Session object at 0x10b0042f0&gt;

    def test_user_registration_and_login_flow(self, client: TestClient, db):
        """測試用戶註冊和登錄流程"""
        # 1. 用戶註冊
        registration_data = {
            "username": "e2e_user",
            "email": "e2e@example.com",
            "password": "password123"
        }
    
        register_response = client.post("/api/auth/register", json=registration_data)
&gt;       assert register_response.status_code == 201
E       assert 422 == 201
E        +  where 422 = &lt;Response [422 Unprocessable Entity]&gt;.status_code

tests/test_e2e.py:31: AssertionError</failure></testcase><testcase classname="tests.test_e2e.TestCompleteUserFlow" name="test_user_profile_and_order_history_flow" time="0.013"><failure message="assert 422 == 201&#10; +  where 422 = &lt;Response [422 Unprocessable Entity]&gt;.status_code">self = &lt;test_e2e.TestCompleteUserFlow object at 0x10940b4d0&gt;
client = &lt;starlette.testclient.TestClient object at 0x10b006930&gt;
db = &lt;sqlalchemy.orm.session.Session object at 0x10b006660&gt;

    def test_user_profile_and_order_history_flow(self, client: TestClient, db):
        """測試用戶個人資料和訂單歷史流程"""
        # 準備測試數據
&gt;       order_id, user_headers = self.test_product_browsing_and_purchase_flow(client, db)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_e2e.py:351: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_e2e.py:60: in test_product_browsing_and_purchase_flow
    user_headers, user_data = self.test_user_registration_and_login_flow(client, db)
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;test_e2e.TestCompleteUserFlow object at 0x10940b4d0&gt;
client = &lt;starlette.testclient.TestClient object at 0x10b006930&gt;
db = &lt;sqlalchemy.orm.session.Session object at 0x10b006660&gt;

    def test_user_registration_and_login_flow(self, client: TestClient, db):
        """測試用戶註冊和登錄流程"""
        # 1. 用戶註冊
        registration_data = {
            "username": "e2e_user",
            "email": "e2e@example.com",
            "password": "password123"
        }
    
        register_response = client.post("/api/auth/register", json=registration_data)
&gt;       assert register_response.status_code == 201
E       assert 422 == 201
E        +  where 422 = &lt;Response [422 Unprocessable Entity]&gt;.status_code

tests/test_e2e.py:31: AssertionError</failure></testcase><testcase classname="tests.test_e2e.TestCompleteUserFlow" name="test_analytics_and_reporting_flow" time="0.012"><failure message="assert 422 == 201&#10; +  where 422 = &lt;Response [422 Unprocessable Entity]&gt;.status_code">self = &lt;test_e2e.TestCompleteUserFlow object at 0x10940b650&gt;
client = &lt;starlette.testclient.TestClient object at 0x10b006720&gt;
db = &lt;sqlalchemy.orm.session.Session object at 0x10b004ad0&gt;

    def test_analytics_and_reporting_flow(self, client: TestClient, db):
        """測試分析和報告流程"""
        # 準備測試數據
&gt;       order_id, user_headers = self.test_product_browsing_and_purchase_flow(client, db)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_e2e.py:409: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_e2e.py:60: in test_product_browsing_and_purchase_flow
    user_headers, user_data = self.test_user_registration_and_login_flow(client, db)
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;test_e2e.TestCompleteUserFlow object at 0x10940b650&gt;
client = &lt;starlette.testclient.TestClient object at 0x10b006720&gt;
db = &lt;sqlalchemy.orm.session.Session object at 0x10b004ad0&gt;

    def test_user_registration_and_login_flow(self, client: TestClient, db):
        """測試用戶註冊和登錄流程"""
        # 1. 用戶註冊
        registration_data = {
            "username": "e2e_user",
            "email": "e2e@example.com",
            "password": "password123"
        }
    
        register_response = client.post("/api/auth/register", json=registration_data)
&gt;       assert register_response.status_code == 201
E       assert 422 == 201
E        +  where 422 = &lt;Response [422 Unprocessable Entity]&gt;.status_code

tests/test_e2e.py:31: AssertionError</failure></testcase><testcase classname="tests.test_e2e.TestCompleteUserFlow" name="test_complete_business_flow" time="0.011"><failure message="assert 422 == 201&#10; +  where 422 = &lt;Response [422 Unprocessable Entity]&gt;.status_code">self = &lt;test_e2e.TestCompleteUserFlow object at 0x10940ab10&gt;
client = &lt;starlette.testclient.TestClient object at 0x10a5ae3f0&gt;
db = &lt;sqlalchemy.orm.session.Session object at 0x10a5af560&gt;

    def test_complete_business_flow(self, client: TestClient, db):
        """測試完整業務流程"""
        # 這個測試整合了所有前面的流程
    
        # 1. 用戶註冊和登錄
&gt;       user_headers, user_data = self.test_user_registration_and_login_flow(client, db)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_e2e.py:470: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;test_e2e.TestCompleteUserFlow object at 0x10940ab10&gt;
client = &lt;starlette.testclient.TestClient object at 0x10a5ae3f0&gt;
db = &lt;sqlalchemy.orm.session.Session object at 0x10a5af560&gt;

    def test_user_registration_and_login_flow(self, client: TestClient, db):
        """測試用戶註冊和登錄流程"""
        # 1. 用戶註冊
        registration_data = {
            "username": "e2e_user",
            "email": "e2e@example.com",
            "password": "password123"
        }
    
        register_response = client.post("/api/auth/register", json=registration_data)
&gt;       assert register_response.status_code == 201
E       assert 422 == 201
E        +  where 422 = &lt;Response [422 Unprocessable Entity]&gt;.status_code

tests/test_e2e.py:31: AssertionError</failure></testcase><testcase classname="tests.test_models.TestUserModel" name="test_user_creation" time="0.006"><failure message="assert None is not None&#10; +  where None = &lt;User testuser&gt;.updated_at">self = &lt;test_models.TestUserModel object at 0x10940ae70&gt;
db = &lt;sqlalchemy.orm.session.Session object at 0x10a5ecd10&gt;

    def test_user_creation(self, db):
        """測試用戶創建"""
        user = User(
            username="testuser",
            email="test@example.com",
            hashed_password="hashed_password_here",
            is_active=True,
            is_admin=False
        )
        db.add(user)
        db.commit()
    
        assert user.id is not None
        assert user.username == "testuser"
        assert user.email == "test@example.com"
        assert user.is_active is True
        assert user.is_admin is False
        assert user.created_at is not None
&gt;       assert user.updated_at is not None
E       assert None is not None
E        +  where None = &lt;User testuser&gt;.updated_at

tests/test_models.py:45: AssertionError</failure></testcase><testcase classname="tests.test_models.TestUserModel" name="test_user_unique_constraints" time="0.006" /><testcase classname="tests.test_models.TestUserModel" name="test_user_repr" time="0.006" /><testcase classname="tests.test_models.TestProductModel" name="test_product_creation" time="0.006"><failure message="TypeError: 'stock' is an invalid keyword argument for Product">self = &lt;test_models.TestProductModel object at 0x1094086b0&gt;
db = &lt;sqlalchemy.orm.session.Session object at 0x1095c2f00&gt;

    def test_product_creation(self, db):
        """測試商品創建"""
&gt;       product = Product(
            name="測試商品",
            description="測試商品描述",
            price=100.0,
            stock=50,
            is_active=True,
            slug="test-product"
        )

tests/test_models.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
&lt;string&gt;:4: in __init__
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:564: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Product 測試商品&gt;
kwargs = {'description': '測試商品描述', 'is_active': True, 'name': '測試商品', 'price': 100.0, ...}
cls_ = &lt;class 'app.models.product.Product'&gt;, k = 'stock'

    def _declarative_constructor(self: Any, **kwargs: Any) -&gt; None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
&gt;               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'stock' is an invalid keyword argument for Product

.venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2142: TypeError</failure></testcase><testcase classname="tests.test_models.TestProductModel" name="test_product_slug_unique" time="0.006"><failure message="TypeError: 'stock' is an invalid keyword argument for Product">self = &lt;test_models.TestProductModel object at 0x10940aa20&gt;
db = &lt;sqlalchemy.orm.session.Session object at 0x10a583a70&gt;

    def test_product_slug_unique(self, db):
        """測試商品 slug 唯一性"""
&gt;       product1 = Product(
            name="商品1",
            description="商品1描述",
            price=100.0,
            stock=50,
            slug="test-product"
        )

tests/test_models.py:108: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
&lt;string&gt;:4: in __init__
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:564: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Product 商品1&gt;
kwargs = {'description': '商品1描述', 'name': '商品1', 'price': 100.0, 'slug': 'test-product', ...}
cls_ = &lt;class 'app.models.product.Product'&gt;, k = 'stock'

    def _declarative_constructor(self: Any, **kwargs: Any) -&gt; None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
&gt;               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'stock' is an invalid keyword argument for Product

.venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2142: TypeError</failure></testcase><testcase classname="tests.test_models.TestProductModel" name="test_product_price_validation" time="0.006"><failure message="TypeError: 'stock' is an invalid keyword argument for Product">self = &lt;test_models.TestProductModel object at 0x10940bb90&gt;
db = &lt;sqlalchemy.orm.session.Session object at 0x10a5ee7e0&gt;

    def test_product_price_validation(self, db):
        """測試商品價格驗證"""
&gt;       product = Product(
            name="測試商品",
            description="測試商品描述",
            price=0.0,
            stock=50,
            slug="test-product"
        )

tests/test_models.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
&lt;string&gt;:4: in __init__
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:564: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Product 測試商品&gt;
kwargs = {'description': '測試商品描述', 'name': '測試商品', 'price': 0.0, 'slug': 'test-product', ...}
cls_ = &lt;class 'app.models.product.Product'&gt;, k = 'stock'

    def _declarative_constructor(self: Any, **kwargs: Any) -&gt; None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
&gt;               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'stock' is an invalid keyword argument for Product

.venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2142: TypeError</failure></testcase><testcase classname="tests.test_models.TestPostModel" name="test_post_creation" time="0.006"><failure message="TypeError: 'author_id' is an invalid keyword argument for Post">self = &lt;test_models.TestPostModel object at 0x109408410&gt;
db = &lt;sqlalchemy.orm.session.Session object at 0x1093f3890&gt;
test_admin_user = &lt;User admin&gt;

    def test_post_creation(self, db, test_admin_user):
        """測試文章創建"""
&gt;       post = Post(
            title="測試文章",
            content="測試文章內容",
            excerpt="測試摘要",
            slug="test-post",
            author_id=test_admin_user.id,
            is_published=True
        )

tests/test_models.py:152: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
&lt;string&gt;:4: in __init__
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:564: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Post 測試文章&gt;
kwargs = {'author_id': 1, 'content': '測試文章內容', 'excerpt': '測試摘要', 'is_published': True, ...}
cls_ = &lt;class 'app.models.post.Post'&gt;, k = 'author_id'

    def _declarative_constructor(self: Any, **kwargs: Any) -&gt; None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
&gt;               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'author_id' is an invalid keyword argument for Post

.venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2142: TypeError</failure></testcase><testcase classname="tests.test_models.TestPostModel" name="test_post_slug_unique" time="0.006"><failure message="TypeError: 'author_id' is an invalid keyword argument for Post">self = &lt;test_models.TestPostModel object at 0x109077500&gt;
db = &lt;sqlalchemy.orm.session.Session object at 0x10a3ec680&gt;
test_admin_user = &lt;User admin&gt;

    def test_post_slug_unique(self, db, test_admin_user):
        """測試文章 slug 唯一性"""
&gt;       post1 = Post(
            title="文章1",
            content="文章1內容",
            slug="test-post",
            author_id=test_admin_user.id
        )

tests/test_models.py:173: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
&lt;string&gt;:4: in __init__
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:564: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Post 文章1&gt;
kwargs = {'author_id': 1, 'content': '文章1內容', 'slug': 'test-post', 'title': '文章1'}
cls_ = &lt;class 'app.models.post.Post'&gt;, k = 'author_id'

    def _declarative_constructor(self: Any, **kwargs: Any) -&gt; None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
&gt;               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'author_id' is an invalid keyword argument for Post

.venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2142: TypeError</failure></testcase><testcase classname="tests.test_models.TestOrderModel" name="test_order_creation" time="0.006"><error message="failed on setup with &quot;TypeError: 'stock' is an invalid keyword argument for Product&quot;">db = &lt;sqlalchemy.orm.session.Session object at 0x10a5fd790&gt;

    @pytest.fixture
    def test_product(db):
        """創建測試商品"""
&gt;       product = Product(
            name="測試商品",
            description="這是一個測試商品",
            price=100.0,
            stock=50,
            is_active=True,
            slug="test-product"
        )

tests/conftest.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:564: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Product 測試商品&gt;
kwargs = {'description': '這是一個測試商品', 'is_active': True, 'name': '測試商品', 'price': 100.0, ...}
cls_ = &lt;class 'app.models.product.Product'&gt;, k = 'stock'

    def _declarative_constructor(self: Any, **kwargs: Any) -&gt; None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
&gt;               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'stock' is an invalid keyword argument for Product

.venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2142: TypeError</error></testcase><testcase classname="tests.test_models.TestOrderModel" name="test_order_status_values" time="0.007"><failure message="sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) NOT NULL constraint failed: orders.order_number&#10;[SQL: INSERT INTO orders (order_number, user_id, customer_name, customer_email, customer_phone, shipping_address, subtotal, shipping_fee, discount_amount, total_amount, status, notes, payment_method, payment_status, payment_updated_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id, created_at]&#10;[parameters: (None, 1, None, None, None, '測試地址', None, 0.0, 0.0, 100.0, 'pending', None, 'credit_card', 'unpaid', None, None)]&#10;(Background on this error at: https://sqlalche.me/e/20/gkpj)">self = &lt;sqlalchemy.engine.base.Connection object at 0x10a5af650&gt;
dialect = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x108c66b10&gt;
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x10a5af170&gt;
statement = &lt;sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x10a5ae630&gt;
parameters = [(None, 1, None, None, None, '測試地址', ...)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -&gt; CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
&gt;                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1969: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x108c66b10&gt;
cursor = &lt;sqlite3.Cursor object at 0x10cc169c0&gt;
statement = 'INSERT INTO orders (order_number, user_id, customer_name, customer_email, customer_phone, shipping_address, subtotal,...atus, payment_updated_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id, created_at'
parameters = (None, 1, None, None, None, '測試地址', ...)
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x10a5af170&gt;

    def do_execute(self, cursor, statement, parameters, context=None):
&gt;       cursor.execute(statement, parameters)
E       sqlite3.IntegrityError: NOT NULL constraint failed: orders.order_number

.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:922: IntegrityError

The above exception was the direct cause of the following exception:

self = &lt;test_models.TestOrderModel object at 0x1094506b0&gt;
db = &lt;sqlalchemy.orm.session.Session object at 0x10a5ad5b0&gt;
test_user = &lt;[PendingRollbackError("This Session's transaction has been rolled back due to a previous exception during flush. To b...e, None)]\n(Background on this error at: https://sqlalche.me/e/20/gkpj)") raised in repr()] User object at 0x10a5af560&gt;

    def test_order_status_values(self, db, test_user):
        """測試訂單狀態值"""
        statuses = ["pending", "confirmed", "shipped", "delivered", "cancelled"]
    
        for status in statuses:
            order = Order(
                user_id=test_user.id,
                total_amount=100.0,
                status=status,
                payment_method="credit_card",
                shipping_address="測試地址",
                items=[]
            )
            db.add(order)
&gt;           db.commit()

tests/test_models.py:237: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1969: in commit
    trans.commit(_to_root=True)
&lt;string&gt;:2: in commit
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1256: in commit
    self._prepare_impl()
&lt;string&gt;:2: in _prepare_impl
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1231: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4312: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4447: in _flush
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4408: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1226: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:516: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1639: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1848: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1988: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2343: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1969: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x108c66b10&gt;
cursor = &lt;sqlite3.Cursor object at 0x10cc169c0&gt;
statement = 'INSERT INTO orders (order_number, user_id, customer_name, customer_email, customer_phone, shipping_address, subtotal,...atus, payment_updated_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id, created_at'
parameters = (None, 1, None, None, None, '測試地址', ...)
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x10a5af170&gt;

    def do_execute(self, cursor, statement, parameters, context=None):
&gt;       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) NOT NULL constraint failed: orders.order_number
E       [SQL: INSERT INTO orders (order_number, user_id, customer_name, customer_email, customer_phone, shipping_address, subtotal, shipping_fee, discount_amount, total_amount, status, notes, payment_method, payment_status, payment_updated_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id, created_at]
E       [parameters: (None, 1, None, None, None, '測試地址', None, 0.0, 0.0, 100.0, 'pending', None, 'credit_card', 'unpaid', None, None)]
E       (Background on this error at: https://sqlalche.me/e/20/gkpj)

.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:922: IntegrityError</failure></testcase><testcase classname="tests.test_models.TestCouponModel" name="test_coupon_creation" time="0.006"><failure message="TypeError: 'usage_limit' is an invalid keyword argument for Coupon">self = &lt;test_models.TestCouponModel object at 0x109451ac0&gt;
db = &lt;sqlalchemy.orm.session.Session object at 0x10a5fd8b0&gt;

    def test_coupon_creation(self, db):
        """測試優惠券創建"""
&gt;       coupon = Coupon(
            code="TESTCODE",
            name="測試優惠券",
            discount_type="percentage",
            discount_value=10.0,
            is_active=True,
            usage_limit=100
        )

tests/test_models.py:252: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
&lt;string&gt;:4: in __init__
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:564: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Coupon TESTCODE&gt;
kwargs = {'code': 'TESTCODE', 'discount_type': 'percentage', 'discount_value': 10.0, 'is_active': True, ...}
cls_ = &lt;class 'app.models.coupon.Coupon'&gt;, k = 'usage_limit'

    def _declarative_constructor(self: Any, **kwargs: Any) -&gt; None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
&gt;               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'usage_limit' is an invalid keyword argument for Coupon

.venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2142: TypeError</failure></testcase><testcase classname="tests.test_models.TestCouponModel" name="test_coupon_code_unique" time="0.007"><failure message="sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) NOT NULL constraint failed: coupons.coupon_type&#10;[SQL: INSERT INTO coupons (code, name, description, coupon_type, discount_type, discount_value, minimum_amount, maximum_discount, product_id, campaign_id, valid_from, valid_to, is_active, usage_count, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id, created_at]&#10;[parameters: ('TESTCODE', '測試優惠券1', None, None, 'percentage', 10.0, None, None, None, None, None, None, 1, 0, None)]&#10;(Background on this error at: https://sqlalche.me/e/20/gkpj)">self = &lt;sqlalchemy.engine.base.Connection object at 0x10b0068d0&gt;
dialect = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x108c66b10&gt;
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x10b004470&gt;
statement = &lt;sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x10b007290&gt;
parameters = [('TESTCODE', '測試優惠券1', None, None, 'percentage', 10.0, ...)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -&gt; CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
&gt;                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1969: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x108c66b10&gt;
cursor = &lt;sqlite3.Cursor object at 0x10b352c40&gt;
statement = 'INSERT INTO coupons (code, name, description, coupon_type, discount_type, discount_value, minimum_amount, maximum_dis..._to, is_active, usage_count, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id, created_at'
parameters = ('TESTCODE', '測試優惠券1', None, None, 'percentage', 10.0, ...)
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x10b004470&gt;

    def do_execute(self, cursor, statement, parameters, context=None):
&gt;       cursor.execute(statement, parameters)
E       sqlite3.IntegrityError: NOT NULL constraint failed: coupons.coupon_type

.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:922: IntegrityError

The above exception was the direct cause of the following exception:

self = &lt;test_models.TestCouponModel object at 0x1094500e0&gt;
db = &lt;sqlalchemy.orm.session.Session object at 0x10b005fd0&gt;

    def test_coupon_code_unique(self, db):
        """測試優惠券代碼唯一性"""
        coupon1 = Coupon(
            code="TESTCODE",
            name="測試優惠券1",
            discount_type="percentage",
            discount_value=10.0
        )
        db.add(coupon1)
&gt;       db.commit()

tests/test_models.py:280: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1969: in commit
    trans.commit(_to_root=True)
&lt;string&gt;:2: in commit
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1256: in commit
    self._prepare_impl()
&lt;string&gt;:2: in _prepare_impl
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1231: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4312: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4447: in _flush
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4408: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1226: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:516: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1639: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1848: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1988: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2343: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1969: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x108c66b10&gt;
cursor = &lt;sqlite3.Cursor object at 0x10b352c40&gt;
statement = 'INSERT INTO coupons (code, name, description, coupon_type, discount_type, discount_value, minimum_amount, maximum_dis..._to, is_active, usage_count, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id, created_at'
parameters = ('TESTCODE', '測試優惠券1', None, None, 'percentage', 10.0, ...)
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x10b004470&gt;

    def do_execute(self, cursor, statement, parameters, context=None):
&gt;       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) NOT NULL constraint failed: coupons.coupon_type
E       [SQL: INSERT INTO coupons (code, name, description, coupon_type, discount_type, discount_value, minimum_amount, maximum_discount, product_id, campaign_id, valid_from, valid_to, is_active, usage_count, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id, created_at]
E       [parameters: ('TESTCODE', '測試優惠券1', None, None, 'percentage', 10.0, None, None, None, None, None, None, 1, 0, None)]
E       (Background on this error at: https://sqlalche.me/e/20/gkpj)

.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:922: IntegrityError</failure></testcase><testcase classname="tests.test_models.TestCouponModel" name="test_coupon_discount_types" time="0.007"><failure message="sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) NOT NULL constraint failed: coupons.coupon_type&#10;[SQL: INSERT INTO coupons (code, name, description, coupon_type, discount_type, discount_value, minimum_amount, maximum_discount, product_id, campaign_id, valid_from, valid_to, is_active, usage_count, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id, created_at]&#10;[parameters: ('TESTPERCENTAGE', '測試percentage優惠券', None, None, 'percentage', 10.0, None, None, None, None, None, None, 1, 0, None)]&#10;(Background on this error at: https://sqlalche.me/e/20/gkpj)">self = &lt;sqlalchemy.engine.base.Connection object at 0x109254200&gt;
dialect = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x108c66b10&gt;
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x1092545c0&gt;
statement = &lt;sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x10b007290&gt;
parameters = [('TESTPERCENTAGE', '測試percentage優惠券', None, None, 'percentage', 10.0, ...)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -&gt; CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
&gt;                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1969: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x108c66b10&gt;
cursor = &lt;sqlite3.Cursor object at 0x10c70f240&gt;
statement = 'INSERT INTO coupons (code, name, description, coupon_type, discount_type, discount_value, minimum_amount, maximum_dis..._to, is_active, usage_count, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id, created_at'
parameters = ('TESTPERCENTAGE', '測試percentage優惠券', None, None, 'percentage', 10.0, ...)
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x1092545c0&gt;

    def do_execute(self, cursor, statement, parameters, context=None):
&gt;       cursor.execute(statement, parameters)
E       sqlite3.IntegrityError: NOT NULL constraint failed: coupons.coupon_type

.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:922: IntegrityError

The above exception was the direct cause of the following exception:

self = &lt;test_models.TestCouponModel object at 0x109451d90&gt;
db = &lt;sqlalchemy.orm.session.Session object at 0x109269b20&gt;

    def test_coupon_discount_types(self, db):
        """測試優惠券折扣類型"""
        discount_types = ["percentage", "fixed_amount"]
    
        for discount_type in discount_types:
            coupon = Coupon(
                code=f"TEST{discount_type.upper()}",
                name=f"測試{discount_type}優惠券",
                discount_type=discount_type,
                discount_value=10.0
            )
            db.add(coupon)
&gt;           db.commit()

tests/test_models.py:305: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1969: in commit
    trans.commit(_to_root=True)
&lt;string&gt;:2: in commit
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1256: in commit
    self._prepare_impl()
&lt;string&gt;:2: in _prepare_impl
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1231: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4312: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4447: in _flush
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4408: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1226: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:516: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1639: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1848: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1988: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2343: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1969: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x108c66b10&gt;
cursor = &lt;sqlite3.Cursor object at 0x10c70f240&gt;
statement = 'INSERT INTO coupons (code, name, description, coupon_type, discount_type, discount_value, minimum_amount, maximum_dis..._to, is_active, usage_count, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id, created_at'
parameters = ('TESTPERCENTAGE', '測試percentage優惠券', None, None, 'percentage', 10.0, ...)
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x1092545c0&gt;

    def do_execute(self, cursor, statement, parameters, context=None):
&gt;       cursor.execute(statement, parameters)
E       sqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) NOT NULL constraint failed: coupons.coupon_type
E       [SQL: INSERT INTO coupons (code, name, description, coupon_type, discount_type, discount_value, minimum_amount, maximum_discount, product_id, campaign_id, valid_from, valid_to, is_active, usage_count, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id, created_at]
E       [parameters: ('TESTPERCENTAGE', '測試percentage優惠券', None, None, 'percentage', 10.0, None, None, None, None, None, None, 1, 0, None)]
E       (Background on this error at: https://sqlalche.me/e/20/gkpj)

.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:922: IntegrityError</failure></testcase><testcase classname="tests.test_models.TestMarketingCampaignModel" name="test_campaign_creation" time="0.008" /><testcase classname="tests.test_models.TestMarketingCampaignModel" name="test_campaign_status_enum" time="0.010" /><testcase classname="tests.test_models.TestMarketingCampaignModel" name="test_campaign_properties" time="0.007"><failure message="assert 66.66666666666666 == 66.66666666666667&#10; +  where 66.66666666666666 = &lt;MarketingCampaign 測試活動&gt;.distribution_rate">self = &lt;test_models.TestMarketingCampaignModel object at 0x109450a40&gt;
db = &lt;sqlalchemy.orm.session.Session object at 0x10b076fc0&gt;

    def test_campaign_properties(self, db):
        """測試活動屬性方法"""
        campaign = MarketingCampaign(
            name="測試活動",
            description="測試活動描述",
            coupon_prefix="TEST",
            coupon_type="percentage",
            discount_type="percentage",
            discount_value=10.0,
            campaign_start=datetime(2024, 1, 1, tzinfo=timezone.utc),
            campaign_end=datetime(2024, 12, 31, tzinfo=timezone.utc),
            coupon_valid_from=datetime(2024, 1, 1, tzinfo=timezone.utc),
            coupon_valid_to=datetime(2024, 12, 31, tzinfo=timezone.utc),
            total_coupons=100,
            initial_coupons=50,
            status=CampaignStatus.ACTIVE,
            is_active=True,
            generated_count=30,
            distributed_count=20,
            used_count=10
        )
        db.add(campaign)
        db.commit()
    
        # 測試可以生成更多優惠券
        assert campaign.can_generate_more_coupons is True
    
        # 測試使用率
        assert campaign.usage_rate == 33.33333333333333
    
        # 測試分發率
&gt;       assert campaign.distribution_rate == 66.66666666666667
E       assert 66.66666666666666 == 66.66666666666667
E        +  where 66.66666666666666 = &lt;MarketingCampaign 測試活動&gt;.distribution_rate

tests/test_models.py:412: AssertionError</failure></testcase><testcase classname="tests.test_models.TestSystemSettingsModel" name="test_settings_creation" time="0.007" /><testcase classname="tests.test_models.TestSystemSettingsModel" name="test_settings_key_unique" time="0.006" /><testcase classname="tests.test_models.TestSystemSettingsModel" name="test_settings_parse_value" time="0.007" /><testcase classname="tests.test_models.TestSystemSettingsModel" name="test_settings_to_dict" time="0.006" /><testcase classname="tests.test_models.TestPageViewModel" name="test_page_view_creation" time="0.007" /><testcase classname="tests.test_models.TestDailyStatsModel" name="test_daily_stats_creation" time="0.007" /><testcase classname="tests.test_models.TestNewsletterModel" name="test_newsletter_creation" time="0.007"><failure message="sqlalchemy.exc.ProgrammingError: (sqlite3.ProgrammingError) Error binding parameter 5: type 'list' is not supported&#10;[SQL: INSERT INTO newsletter_subscribers (email, name, is_active, source, tags, unsubscribe_token, last_email_sent, emails_sent, emails_opened, emails_clicked, unsubscribed_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id, subscribed_at, created_at]&#10;[parameters: ('test@example.com', '測試用戶', 1, 'website', ['promotion', 'news'], None, None, 0, 0, 0, None, None)]&#10;(Background on this error at: https://sqlalche.me/e/20/f405)">self = &lt;sqlalchemy.engine.base.Connection object at 0x10940a360&gt;
dialect = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x108c66b10&gt;
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x10959cbf0&gt;
statement = &lt;sqlalchemy.dialects.sqlite.base.SQLiteCompiler object at 0x10959c1a0&gt;
parameters = [('test@example.com', '測試用戶', 1, 'website', ['promotion', 'news'], None, ...)]

    def _exec_single_context(
        self,
        dialect: Dialect,
        context: ExecutionContext,
        statement: Union[str, Compiled],
        parameters: Optional[_AnyMultiExecuteParams],
    ) -&gt; CursorResult[Any]:
        """continue the _execute_context() method for a single DBAPI
        cursor.execute() or cursor.executemany() call.
    
        """
        if dialect.bind_typing is BindTyping.SETINPUTSIZES:
            generic_setinputsizes = context._prepare_set_input_sizes()
    
            if generic_setinputsizes:
                try:
                    dialect.do_set_input_sizes(
                        context.cursor, generic_setinputsizes, context
                    )
                except BaseException as e:
                    self._handle_dbapi_exception(
                        e, str(statement), parameters, None, context
                    )
    
        cursor, str_statement, parameters = (
            context.cursor,
            context.statement,
            context.parameters,
        )
    
        effective_parameters: Optional[_AnyExecuteParams]
    
        if not context.executemany:
            effective_parameters = parameters[0]
        else:
            effective_parameters = parameters
    
        if self._has_events or self.engine._has_events:
            for fn in self.dispatch.before_cursor_execute:
                str_statement, effective_parameters = fn(
                    self,
                    cursor,
                    str_statement,
                    effective_parameters,
                    context,
                    context.executemany,
                )
    
        if self._echo:
            self._log_info(str_statement)
    
            stats = context._get_cache_stats()
    
            if not self.engine.hide_parameters:
                self._log_info(
                    "[%s] %r",
                    stats,
                    sql_util._repr_params(
                        effective_parameters,
                        batches=10,
                        ismulti=context.executemany,
                    ),
                )
            else:
                self._log_info(
                    "[%s] [SQL parameters hidden due to hide_parameters=True]",
                    stats,
                )
    
        evt_handled: bool = False
        try:
            if context.execute_style is ExecuteStyle.EXECUTEMANY:
                effective_parameters = cast(
                    "_CoreMultiExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_executemany:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_executemany(
                        cursor,
                        str_statement,
                        effective_parameters,
                        context,
                    )
            elif not effective_parameters and context.no_parameters:
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute_no_params:
                        if fn(cursor, str_statement, context):
                            evt_handled = True
                            break
                if not evt_handled:
                    self.dialect.do_execute_no_params(
                        cursor, str_statement, context
                    )
            else:
                effective_parameters = cast(
                    "_CoreSingleExecuteParams", effective_parameters
                )
                if self.dialect._has_events:
                    for fn in self.dialect.dispatch.do_execute:
                        if fn(
                            cursor,
                            str_statement,
                            effective_parameters,
                            context,
                        ):
                            evt_handled = True
                            break
                if not evt_handled:
&gt;                   self.dialect.do_execute(
                        cursor, str_statement, effective_parameters, context
                    )

.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1969: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x108c66b10&gt;
cursor = &lt;sqlite3.Cursor object at 0x10a4787c0&gt;
statement = 'INSERT INTO newsletter_subscribers (email, name, is_active, source, tags, unsubscribe_token, last_email_sent, emails_...cked, unsubscribed_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id, subscribed_at, created_at'
parameters = ('test@example.com', '測試用戶', 1, 'website', ['promotion', 'news'], None, ...)
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x10959cbf0&gt;

    def do_execute(self, cursor, statement, parameters, context=None):
&gt;       cursor.execute(statement, parameters)
E       sqlite3.ProgrammingError: Error binding parameter 5: type 'list' is not supported

.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:922: ProgrammingError

The above exception was the direct cause of the following exception:

self = &lt;test_models.TestNewsletterModel object at 0x10940b890&gt;
db = &lt;sqlalchemy.orm.session.Session object at 0x10b0f0c50&gt;

    def test_newsletter_creation(self, db):
        """測試電子報創建"""
        newsletter = NewsletterSubscriber(
            email="test@example.com",
            name="測試用戶",
            is_active=True,
            tags=["promotion", "news"]
        )
        db.add(newsletter)
&gt;       db.commit()

tests/test_models.py:605: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1969: in commit
    trans.commit(_to_root=True)
&lt;string&gt;:2: in commit
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1256: in commit
    self._prepare_impl()
&lt;string&gt;:2: in _prepare_impl
    ???
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state_changes.py:139: in _go
    ret_value = fn(self, *arg, **kw)
                ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:1231: in _prepare_impl
    self.session.flush()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4312: in flush
    self._flush(objects)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4447: in _flush
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py:4408: in _flush
    flush_context.execute()
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:466: in execute
    rec.execute(self)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/unitofwork.py:642: in execute
    util.preloaded.orm_persistence.save_obj(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:93: in save_obj
    _emit_insert_statements(
.venv/lib/python3.12/site-packages/sqlalchemy/orm/persistence.py:1226: in _emit_insert_statements
    result = connection.execute(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1416: in execute
    return meth(
.venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py:516: in _execute_on_connection
    return connection._execute_clauseelement(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1639: in _execute_clauseelement
    ret = self._execute_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1848: in _execute_context
    return self._exec_single_context(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1988: in _exec_single_context
    self._handle_dbapi_exception(
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:2343: in _handle_dbapi_exception
    raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
.venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py:1969: in _exec_single_context
    self.dialect.do_execute(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;sqlalchemy.dialects.sqlite.pysqlite.SQLiteDialect_pysqlite object at 0x108c66b10&gt;
cursor = &lt;sqlite3.Cursor object at 0x10a4787c0&gt;
statement = 'INSERT INTO newsletter_subscribers (email, name, is_active, source, tags, unsubscribe_token, last_email_sent, emails_...cked, unsubscribed_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id, subscribed_at, created_at'
parameters = ('test@example.com', '測試用戶', 1, 'website', ['promotion', 'news'], None, ...)
context = &lt;sqlalchemy.dialects.sqlite.base.SQLiteExecutionContext object at 0x10959cbf0&gt;

    def do_execute(self, cursor, statement, parameters, context=None):
&gt;       cursor.execute(statement, parameters)
E       sqlalchemy.exc.ProgrammingError: (sqlite3.ProgrammingError) Error binding parameter 5: type 'list' is not supported
E       [SQL: INSERT INTO newsletter_subscribers (email, name, is_active, source, tags, unsubscribe_token, last_email_sent, emails_sent, emails_opened, emails_clicked, unsubscribed_at, updated_at) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING id, subscribed_at, created_at]
E       [parameters: ('test@example.com', '測試用戶', 1, 'website', ['promotion', 'news'], None, None, 0, 0, 0, None, None)]
E       (Background on this error at: https://sqlalche.me/e/20/f405)

.venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py:922: ProgrammingError</failure></testcase><testcase classname="tests.test_models.TestNewsletterModel" name="test_newsletter_email_unique" time="0.007" /><testcase classname="tests.test_models.TestViewLogModel" name="test_view_log_creation" time="0.008" /><testcase classname="tests.test_models.TestFavoriteModel" name="test_favorite_creation" time="0.007"><error message="failed on setup with &quot;TypeError: 'stock' is an invalid keyword argument for Product&quot;">db = &lt;sqlalchemy.orm.session.Session object at 0x10b310e60&gt;

    @pytest.fixture
    def test_product(db):
        """創建測試商品"""
&gt;       product = Product(
            name="測試商品",
            description="這是一個測試商品",
            price=100.0,
            stock=50,
            is_active=True,
            slug="test-product"
        )

tests/conftest.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:564: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Product 測試商品&gt;
kwargs = {'description': '這是一個測試商品', 'is_active': True, 'name': '測試商品', 'price': 100.0, ...}
cls_ = &lt;class 'app.models.product.Product'&gt;, k = 'stock'

    def _declarative_constructor(self: Any, **kwargs: Any) -&gt; None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
&gt;               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'stock' is an invalid keyword argument for Product

.venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2142: TypeError</error></testcase><testcase classname="tests.test_models.TestFavoriteModel" name="test_favorite_unique_constraint" time="0.007"><error message="failed on setup with &quot;TypeError: 'stock' is an invalid keyword argument for Product&quot;">db = &lt;sqlalchemy.orm.session.Session object at 0x10b312150&gt;

    @pytest.fixture
    def test_product(db):
        """創建測試商品"""
&gt;       product = Product(
            name="測試商品",
            description="這是一個測試商品",
            price=100.0,
            stock=50,
            is_active=True,
            slug="test-product"
        )

tests/conftest.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:566: in _initialize_instance
    with util.safe_reraise():
         ^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.12/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
.venv/lib/python3.12/site-packages/sqlalchemy/orm/state.py:564: in _initialize_instance
    manager.original_init(*mixed[1:], **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;Product 測試商品&gt;
kwargs = {'description': '這是一個測試商品', 'is_active': True, 'name': '測試商品', 'price': 100.0, ...}
cls_ = &lt;class 'app.models.product.Product'&gt;, k = 'stock'

    def _declarative_constructor(self: Any, **kwargs: Any) -&gt; None:
        """A simple constructor that allows initialization from kwargs.
    
        Sets attributes on the constructed instance using the names and
        values in ``kwargs``.
    
        Only keys that are present as
        attributes of the instance's class are allowed. These could be,
        for example, any mapped columns or relationships.
        """
        cls_ = type(self)
        for k in kwargs:
            if not hasattr(cls_, k):
&gt;               raise TypeError(
                    "%r is an invalid keyword argument for %s" % (k, cls_.__name__)
                )
E               TypeError: 'stock' is an invalid keyword argument for Product

.venv/lib/python3.12/site-packages/sqlalchemy/orm/decl_base.py:2142: TypeError</error></testcase></testsuite></testsuites>